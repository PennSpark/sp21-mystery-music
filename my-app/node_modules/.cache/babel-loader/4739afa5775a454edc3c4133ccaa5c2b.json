{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\App.js\";\n// App.js\nimport React, { Component } from 'react';\nimport Game from './Game';\nimport game from './Board';\nimport * as PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPressCreate = e => {\n      this.size = 1; // Create a random name for the channel\n\n      this.roomId = shortid.generate().substring(0, 5);\n      this.lobbyChannel = 'spotifylobby--' + this.roomId; //endpoint for creating a new game in databsae\n\n      const newGame = {\n        joinCode: this.roomId\n      };\n      axios.post('http://localhost:5001/games/add', newGame).then(res => console.log(res.data));\n      this.pubnub.subscribe({\n        channels: [this.lobbyChannel],\n        withPresence: true\n      }); // Open the modal sweetalert2\n\n      Swal.mixin({\n        confirmButtonText: 'Next &rarr;',\n        showCancelButton: true,\n        progressSteps: ['1', '2', '3']\n      }).queue([{\n        title: 'Share this room ID with your friend',\n        text: this.roomId\n      }, {\n        title: 'Type your username here',\n        input: 'text'\n      }, {\n        title: 'Song 1',\n        text: 'List your top 5 songs!',\n        input: 'text',\n        inputPlaceholder: 'Enter your first song'\n      }, {\n        title: 'Song 2',\n        input: 'text',\n        inputPlaceholder: 'Enter your second song'\n      }, {\n        title: 'Song 3',\n        input: 'text',\n        inputPlaceholder: 'Enter your third song'\n      }, {\n        title: 'Song 4',\n        input: 'text',\n        inputPlaceholder: 'Enter your fourth song'\n      }, {\n        title: 'Song 5',\n        input: 'text',\n        inputPlaceholder: 'Enter your fifth song'\n      }]).then(result => {\n        if (result.value) {\n          // const answers = JSON.stringify(result.value)\n          Swal.fire({\n            html: `\n            Your username:\n            <pre><code>${result.value[1]}</code></pre>\n          `,\n            confirmButtonText: 'Play!'\n          });\n          this.setState({\n            player: result.value[1],\n            isRoomCreator: true,\n            isDisabled: true,\n            // Disable the 'Create' button\n            myTurn: true // Room creator makes the 1st move\n\n          }); // endpoint for adding a new player to a game in database\n\n          const newPlayer = {\n            joinCode: this.roomId,\n            playerName: result.value[1]\n          };\n          axios.post('http://localhost:5001/games/addPlayer', newPlayer).then(res => console.log(res.data));\n          axios.get('http://localhost:5001/games/').then(response => {\n            for (var i = 0; i < response.data.length; i++) {\n              if (response.data[i].joinCode == this.roomId) {\n                this.databaseGameId = response.data[i]._id;\n              }\n            }\n          }).catch(error => {\n            console.log(error);\n          }); // add songs to the database using result.value[2] - 6\n          // use result.value[1] for player name\n          // result.value[0] for room id\n        }\n\n        ;\n      });\n    };\n\n    this.onPressJoin = e => {\n      Swal.mixin({\n        confirmButtonText: 'Next &rarr;',\n        showCancelButton: true,\n        progressSteps: ['1', '2', '3']\n      }).queue([{\n        inputPlaceholder: 'Enter the room id',\n        input: 'text'\n      }, {\n        title: 'Type your username here',\n        input: 'text'\n      }, {\n        title: 'Song 1',\n        text: 'List your top 5 songs!',\n        input: 'text',\n        inputPlaceholder: 'Enter your first song'\n      }, {\n        title: 'Song 2',\n        input: 'text',\n        inputPlaceholder: 'Enter your second song'\n      }, {\n        title: 'Song 3',\n        input: 'text',\n        inputPlaceholder: 'Enter your third song'\n      }, {\n        title: 'Song 4',\n        input: 'text',\n        inputPlaceholder: 'Enter your fourth song'\n      }, {\n        title: 'Song 5',\n        input: 'text',\n        inputPlaceholder: 'Enter your fifth song'\n      }]).then(result => {\n        if (result.value) {\n          this.roomId = // const answers = JSON.stringify(result.value)\n          Swal.fire({\n            html: `\n            Your username:\n            <pre><code>${result.value[1]}</code></pre>\n          `,\n            confirmButtonText: 'Play!'\n          }); // Check if the user typed a value in the input field\n\n          if (result.value[1]) {\n            this.joinRoom(result.value[0]);\n            this.setState({\n              player: result.value[1]\n            }); //endpoint for adding a new player to a game in databsae\n\n            const newPlayer = {\n              joinCode: result.value[0],\n              playerName: result.value[1]\n            };\n            axios.post('http://localhost:5001/games/addPlayer', newPlayer).then(res => console.log(res.data));\n            axios.get('http://localhost:5001/games/').then(response => {\n              for (var i = 0; i < response.data.length; i++) {\n                if (response.data[i].joinCode == this.roomId) {\n                  this.databaseGameId = response.data[i]._id;\n                }\n              }\n            }).catch(error => {\n              console.log(error);\n            }); // add songs to the database using result.value[2] - 6\n            // use result.value[1] for player name\n          }\n\n          ;\n        }\n\n        ;\n      });\n    };\n\n    this.joinRoom = value => {\n      this.roomId = value;\n      this.lobbyChannel = 'spotifylobby--' + this.roomId; // Check the number of people in the channel\n\n      this.pubnub.hereNow({\n        channels: [this.lobbyChannel]\n      }).then(response => {\n        if (response.totalOccupancy < 8) {\n          this.size += 1;\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            title: 'Error',\n            text: 'Game is full.'\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.endGame = () => {\n      this.setState({\n        player: '',\n        isPlaying: false,\n        isRoomCreator: false,\n        isDisabled: false,\n        myTurn: false\n      });\n      this.lobbyChannel = null;\n      this.gameChannel = null;\n      this.roomId = null;\n      this.pubnub.unsubscribe({\n        channels: [this.lobbyChannel, this.gameChannel]\n      });\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\n    }); // TODO: Clean up code and get rid of unnecessary bits\n\n    this.state = {\n      player: '',\n      // username players enter for themselves\n      isPlaying: false,\n      // Set to true when at least 2 players are in a channel\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n    this.lobbyChannel = null; // Lobby channel\n\n    this.gameChannel = null; // Game channel\n\n    this.size = null; // Number of players in room USE DATABASE FOR THIS\n\n    this.roomId = null; // Unique id when player creates a room\n\n    this.databaseGameId = null; // id for game in database for endpoints\n\n    this.pubnub.init(this); // Initialize PubNub\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        // Start the game once an opponent joins the channel\n        if (msg.message.notRoomCreator) {\n          // Create a different channel for the game\n          this.gameChannel = 'spotifygame--' + this.roomId;\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n          this.setState({\n            isPlaying: true\n          }); // Close the modals if they are opened\n\n          Swal.close();\n        }\n      });\n    }\n  } // Create a room channel\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!this.state.isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"home-v2-1 screen\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"overlap-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            class: \"card-pricing-2\",\n            src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-2@1x.svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            class: \"card-pricing-3\",\n            src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-3@1x.svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"text-1\",\n            children: [\"How to Play\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 25\n            }, this), \"Up to 8 players may join a game, be sure to share the join code with your friends!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 113\n            }, this), \"During each round, the game will play a song from one of the player\\u2019s Spotify playlist.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 94\n            }, this), \"Players then have to select the user whose playlist they think the song is from.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 73\n            }, this), \"Correct answers get 1 point, and wrong answers get 0 points.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 27\n            }, this), \"After 20 rounds, the player with the most number of points wins!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"flex-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"create-button\",\n              disabled: this.state.isDisabled,\n              onClick: e => this.onPressCreate(),\n              children: \" Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"join-button\",\n              onClick: e => this.onPressJoin(),\n              children: \" Join\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 8\n      }, this), this.state.isPlaying && /*#__PURE__*/_jsxDEV(Game, {\n        pubnub: this.pubnub,\n        gameChannel: this.gameChannel,\n        player: this.state.player,\n        size: this.size,\n        isRoomCreator: this.state.isRoomCreator,\n        endGame: this.endGame,\n        roomId: this.roomId,\n        databaseGameId: this.databaseGameId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/App.js"],"names":["React","Component","Game","game","PubNubReact","Swal","shortid","axios","App","constructor","props","onPressCreate","e","size","roomId","generate","substring","lobbyChannel","newGame","joinCode","post","then","res","console","log","data","pubnub","subscribe","channels","withPresence","mixin","confirmButtonText","showCancelButton","progressSteps","queue","title","text","input","inputPlaceholder","result","value","fire","html","setState","player","isRoomCreator","isDisabled","myTurn","newPlayer","playerName","get","response","i","length","databaseGameId","_id","catch","error","onPressJoin","joinRoom","hereNow","totalOccupancy","publish","message","notRoomCreator","channel","endGame","isPlaying","gameChannel","unsubscribe","publishKey","subscribeKey","state","init","componentWillUnmount","componentDidUpdate","getMessage","msg","close","render"],"mappings":"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","sourcesContent":["// App.js\r\nimport React, { Component } from 'react';\r\nimport Game from './Game';\r\nimport game from './Board';\r\nimport * as PubNubReact from 'pubnub-react';\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from 'shortid';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\r\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\r\n    });\r\n    // TODO: Clean up code and get rid of unnecessary bits\r\n    this.state = {\r\n      player: '', // username players enter for themselves\r\n      isPlaying: false, // Set to true when at least 2 players are in a channel\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    };\r\n    this.lobbyChannel = null; // Lobby channel\r\n    this.gameChannel = null; // Game channel\r\n    this.size = null; // Number of players in room USE DATABASE FOR THIS\r\n    this.roomId = null; // Unique id when player creates a room\r\n    this.databaseGameId = null // id for game in database for endpoints\r\n    this.pubnub.init(this); // Initialize PubNub\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if (this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n        // Start the game once an opponent joins the channel\r\n        if (msg.message.notRoomCreator) {\r\n          // Create a different channel for the game\r\n          this.gameChannel = 'spotifygame--' + this.roomId;\r\n\r\n          this.pubnub.subscribe({\r\n            channels: [this.gameChannel]\r\n          });\r\n\r\n          this.setState({\r\n            isPlaying: true\r\n          });\r\n\r\n          // Close the modals if they are opened\r\n          Swal.close();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    this.size = 1;\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0, 5);\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    //endpoint for creating a new game in databsae\r\n    const newGame = {\r\n      joinCode: this.roomId,\r\n    };\r\n    axios.post('http://localhost:5001/games/add', newGame)\r\n      .then(res => console.log(res.data));\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true\r\n    });\r\n\r\n    // Open the modal sweetalert2\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2', '3']\r\n    }).queue([\r\n      {\r\n        title: 'Share this room ID with your friend',\r\n        text: this.roomId\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      },\r\n      {\r\n        title: 'Song 1',\r\n        text: 'List your top 5 songs!',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your first song'\r\n      },\r\n      {\r\n        title: 'Song 2',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your second song'\r\n      },\r\n      {\r\n        title: 'Song 3',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your third song'\r\n      },\r\n      {\r\n        title: 'Song 4',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your fourth song'\r\n      },\r\n      {\r\n        title: 'Song 5',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your fifth song'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n\r\n        this.setState({\r\n          player: result.value[1],\r\n          isRoomCreator: true,\r\n          isDisabled: true, // Disable the 'Create' button\r\n          myTurn: true, // Room creator makes the 1st move\r\n        });\r\n\r\n        // endpoint for adding a new player to a game in database\r\n        const newPlayer = {\r\n          joinCode: this.roomId,\r\n          playerName: result.value[1]\r\n        };\r\n        axios.post('http://localhost:5001/games/addPlayer', newPlayer)\r\n          .then(res => console.log(res.data));\r\n          axios.get('http://localhost:5001/games/')\r\n          .then(response => {\r\n            for (var i = 0; i < response.data.length; i++){\r\n              if (response.data[i].joinCode == this.roomId){\r\n                this.databaseGameId = response.data[i]._id;\r\n              }\r\n            }\r\n          })\r\n          .catch((error) => {\r\n              console.log(error);\r\n          });\r\n\r\n        // add songs to the database using result.value[2] - 6\r\n        // use result.value[1] for player name\r\n        // result.value[0] for room id\r\n      };\r\n    });\r\n  }\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2', '3']\r\n    }).queue([\r\n      {\r\n        inputPlaceholder: 'Enter the room id',\r\n        input: 'text'\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      },\r\n      {\r\n        title: 'Song 1',\r\n        text: 'List your top 5 songs!',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your first song'\r\n      },\r\n      {\r\n        title: 'Song 2',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your second song'\r\n      },\r\n      {\r\n        title: 'Song 3',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your third song'\r\n      },\r\n      {\r\n        title: 'Song 4',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your fourth song'\r\n      },\r\n      {\r\n        title: 'Song 5',\r\n        input: 'text',\r\n        inputPlaceholder: 'Enter your fifth song'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        this.roomId =\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n        // Check if the user typed a value in the input field\r\n        if (result.value[1]) {\r\n          this.joinRoom(result.value[0]);\r\n\r\n          this.setState({\r\n            player: result.value[1],\r\n          });\r\n\r\n          //endpoint for adding a new player to a game in databsae\r\n          const newPlayer = {\r\n            joinCode: result.value[0],\r\n            playerName: result.value[1]\r\n          };\r\n\r\n          axios.post('http://localhost:5001/games/addPlayer', newPlayer)\r\n            .then(res => console.log(res.data));\r\n\r\n            axios.get('http://localhost:5001/games/')\r\n            .then(response => {\r\n              for (var i = 0; i < response.data.length; i++){\r\n                if (response.data[i].joinCode == this.roomId){\r\n                  this.databaseGameId = response.data[i]._id;\r\n                }\r\n              }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n\r\n          // add songs to the database using result.value[2] - 6\r\n          // use result.value[1] for player name\r\n        \r\n        };\r\n      };\r\n    });\r\n\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub.hereNow({\r\n      channels: [this.lobbyChannel],\r\n    }).then((response) => {\r\n      if (response.totalOccupancy < 8) {\r\n        this.size += 1;\r\n\r\n        this.pubnub.subscribe({\r\n          channels: [this.lobbyChannel],\r\n          withPresence: true\r\n        });\r\n\r\n        this.pubnub.publish({\r\n          message: {\r\n            notRoomCreator: true,\r\n          },\r\n          channel: this.lobbyChannel\r\n        });\r\n      }\r\n      else {\r\n        // Game in progress\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'Game is full.',\r\n        })\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // Reset everything\r\n  endGame = () => {\r\n    this.setState({\r\n      player: '',\r\n      isPlaying: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    });\r\n\r\n    this.lobbyChannel = null;\r\n    this.gameChannel = null;\r\n    this.roomId = null;\r\n\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n   <div>\r\n     {\r\n       !this.state.isPlaying &&\r\n   \r\n       <div class=\"home-v2-1 screen\">\r\n         <div class=\"overlap-group\">\r\n           <img\r\n             class=\"card-pricing-2\"\r\n             src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-2@1x.svg\"\r\n           />\r\n           <img\r\n             class=\"card-pricing-3\"\r\n             src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-3@1x.svg\"\r\n           />\r\n           <div class=\"text-1\">\r\n             How to Play<br />Up to 8 players may join a game, be sure to share the join code with your friends!<br />During\r\n             each round, the game will play a song from one of the player’s Spotify playlist.<br />Players then have to\r\n             select the user whose playlist they think the song is from.<br />Correct answers get 1 point, and wrong answers\r\n             get 0 points.<br />After 20 rounds, the player with the most number of points wins!\r\n           </div>\r\n           <div class=\"flex-row\">\r\n              <button\r\n                class=\"create-button\"\r\n                disabled={this.state.isDisabled}\r\n                onClick={(e) => this.onPressCreate()}\r\n                > Create\r\n              </button>\r\n              <button\r\n                class=\"join-button\"\r\n                onClick={(e) => this.onPressJoin()}\r\n                > Join\r\n              </button>\r\n           </div>\r\n         </div>\r\n       </div>\r\n  \r\n    }\r\n\r\n    {\r\n      this.state.isPlaying &&\r\n      <Game\r\n        pubnub={this.pubnub}\r\n        gameChannel={this.gameChannel}\r\n        player={this.state.player}\r\n        size={this.size}\r\n        isRoomCreator={this.state.isRoomCreator}\r\n        endGame={this.endGame}\r\n        roomId ={this.roomId}\r\n        databaseGameId = {this.databaseGameId}\r\n      />\r\n    }\r\n   </div>\r\n\r\n                                \r\n    );\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}