{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\mystery-music2\\\\sp21-mystery-music\\\\my-app\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\r\n    this.state = {\r\n      // TODO: get number of players in game from database and replace 8\r\n      // also fill the squares with the player names in fillArray\r\n      squares: this.fillArray(8), \r\n        };\r\n    this.round = 0;\r\n    this.scores = Array(8).fill(0);\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.answer = 0;\r\n    */\n  }\n  /*\r\n    // function for each new round\r\n    newRound = () =>{\r\n      var squares = this.state.squares;\r\n  \r\n      squares = Array(8).fill(\"temp\");\r\n      this.round += 1;\r\n      this.answer = this.round;\r\n  \r\n      this.setState({\r\n        // update scores\r\n        squares: squares,\r\n      });\r\n    }\r\n  \r\n    timer = () => {\r\n      var timeleft = 10;\r\n      var timer = setInterval(function(){\r\n        if(timeleft <= 0){\r\n          clearInterval(timer);\r\n          document.getElementById(\"countdown\").innerHTML = \"Finished\";\r\n          this.round += 1;\r\n          var x = this.round;\r\n          document.getElementById(\"status\").innerHTML = 'Round:' + x;\r\n          this.newRound();\r\n        } else {\r\n          document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\r\n        }\r\n        timeleft -= 1;\r\n      }, 1000);\r\n    }\r\n  \r\n    fillArray(size) {\r\n      var array = Array(size).fill();\r\n      for (var index = 0; index < array.length; index++) {\r\n        array[index] = index;\r\n      }\r\n      return array;\r\n    }\r\n  \r\n    nextTurn(n) {\r\n      // TODO: get next player from api calls\r\n      // currently a placeholder\r\n      return Math.floor(Math.random() * n);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.timer();\r\n      this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n  \r\n        // Publish move to the opponent's board    \r\n        this.publishMove(msg.message.index, msg.message.piece);\r\n  \r\n        // Start a new game\r\n        if(msg.message.reset){\r\n          this.setState({\r\n            // update scores\r\n            squares: this.fillArray(8),\r\n          });\r\n  \r\n          this.round = 0;\r\n          this.scores = Array(8).fill(0);\r\n          this.gameOver = false;\r\n          this.counter = 0;\r\n          this.answer = 0;\r\n          Swal.close()\r\n        }\r\n  \r\n        // End the game and go back to the lobby\r\n        else if(msg.message.endGame){\r\n          Swal.close();\r\n          this.props.endGame();\r\n        }\r\n      });\r\n    }\r\n  \r\n  \t// Update score for the winner\r\n    updateScore = (winner) => {\r\n      // TODO: Implement function\r\n  \r\n  \t\t// End the game once there is a winner\r\n  \t\t// this.gameOver = true;\r\n  \t\t// this.newRound(winner);\t\r\n    }\r\n    \r\n    checkForWinner = () => {\r\n  \r\n      // All rounds have been completed\r\n      if (this.round === 4) {\r\n        this.gameOver = true;\r\n        if(this.props.isRoomCreator) {\r\n          Swal.fire({      \r\n                position: 'top',\r\n                allowOutsideClick: false,\r\n                title: 'Game Over',\r\n                text: 'Ready for next round?',\r\n                showCancelButton: true,\r\n                confirmButtonColor: 'rgb(208,33,41)',\r\n                cancelButtonColor: '#aaa',\r\n                cancelButtonText: 'Nope',\r\n                confirmButtonText: 'Yea!',\r\n                width: 275,\r\n              }).then((result) => {\r\n                // Start a new round\r\n                if (result.value) {\r\n                  this.props.pubnub.publish({\r\n                    message: {\r\n                      reset: true\r\n                    },\r\n                    channel: this.props.gameChannel\r\n                  });\r\n                }\r\n        \r\n                else{\r\n                  // End the game\r\n                  this.props.pubnub.publish({\r\n                    message: {\r\n                      endGame: true\r\n                    },\r\n                    channel: this.props.gameChannel\r\n                  });\r\n                }\r\n              })      \r\n            \r\n        } else {\r\n        Swal.fire({  \r\n              position: 'top',\r\n              allowOutsideClick: false,\r\n              title: 'Game Over',\r\n              text: 'Waiting for a new round...',\r\n              confirmButtonColor: 'rgb(208,33,41)',\r\n              width: 275\r\n            });\r\n          }\r\n      }\r\n    };\r\n     \r\n    // Publishing an opponent's move onto the board\r\n    publishMove = (index, piece) => {\r\n      var squares = this.state.squares;\r\n  \r\n      squares[index] = piece;\r\n  \r\n      this.setState({\r\n        // update scores\r\n        squares: squares,\r\n      });\r\n      \r\n      if (index === this.answer) {\r\n        this.scores[index] += 1;\r\n      }\r\n  \r\n      this.checkForWinner()\r\n    }\r\n  \r\n    // Making a move on the board and publishing it\r\n    onMakeMove = (index) => {\r\n      var squares = this.state.squares;\r\n  \r\n      // Update chosen button to show that it's been clicked\r\n      if(squares[index]) { \r\n        squares[index] = 'X';\r\n  \r\n         this.setState({\r\n           squares: squares,\r\n         });\r\n  \r\n        // Publish move to the channel\r\n        this.props.pubnub.publish({\r\n          message: {\r\n            index: index,\r\n            piece: 'X',\r\n          },\r\n          channel: this.props.gameChannel\r\n        });  \r\n  \r\n        // Check if there is a winner\r\n        this.checkForWinner();\r\n      }\r\n    }\r\n  */\n  // Instructions\n  //   How to Play\n  // Up to 8 players may join a game, be sure to share the join code with your friends!\n  // During each round, the game will play a song from one of the playerâ€™s Spotify playlist.\n  // Players then have to select the user whose playlist they think the song is from.\n  // Correct answers get 1 point, and wrong answers get 0 points.\n  // After 20 rounds, the player with the most number of points wins!\n\n\n  render() {\n    /*\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n    */\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container-center-horizontal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"game-screen-1 screen\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"flex-row-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            class: \"mystery-music-logo3-1\",\n            src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/mysterymusic-logo3-1@2x.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"overlap-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              class: \"text-1\",\n              children: \"Guess Whose Playlist?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"chevron-down\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"vector\",\n                src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector@2x.svg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"flex-row-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"overlap-group1\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              class: \"vector-197\",\n              src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector-197@2x.svg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"album-cover\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"play-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"overlap-group3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"rectangle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"overlap-group2\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"leaderboard-example\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"overlap-group3-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"name-1 karla-normal-black-24px\",\n                  children: \"Linda\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  class: \"star-1\",\n                  src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/star-1@2x.svg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"number-1 karla-bold-black-24px\",\n                  children: \"6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"flex-row-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"name-2 karla-normal-black-24px\",\n                  children: \"Lindsay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"number-2 karla-bold-black-24px\",\n                  children: \"5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"flex-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"egret karla-normal-black-24px\",\n                  children: \"Egret\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"number karla-bold-black-24px\",\n                  children: \"3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"flex-row-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"name karla-normal-black-24px\",\n                  children: \"David\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"number-3 karla-bold-black-24px\",\n                  children: \"1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/david/mystery-music2/sp21-mystery-music/my-app/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\nimport './Game.css';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /*\r\n    this.state = {\r\n      // TODO: get number of players in game from database and replace 8\r\n      // also fill the squares with the player names in fillArray\r\n      squares: this.fillArray(8), \r\n  \r\n    };\r\n    this.round = 0;\r\n    this.scores = Array(8).fill(0);\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.answer = 0;\r\n    */\r\n  }\r\n/*\r\n  // function for each new round\r\n  newRound = () =>{\r\n    var squares = this.state.squares;\r\n\r\n    squares = Array(8).fill(\"temp\");\r\n    this.round += 1;\r\n    this.answer = this.round;\r\n\r\n    this.setState({\r\n      // update scores\r\n      squares: squares,\r\n    });\r\n  }\r\n\r\n  timer = () => {\r\n    var timeleft = 10;\r\n    var timer = setInterval(function(){\r\n      if(timeleft <= 0){\r\n        clearInterval(timer);\r\n        document.getElementById(\"countdown\").innerHTML = \"Finished\";\r\n        this.round += 1;\r\n        var x = this.round;\r\n        document.getElementById(\"status\").innerHTML = 'Round:' + x;\r\n        this.newRound();\r\n      } else {\r\n        document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\r\n      }\r\n      timeleft -= 1;\r\n    }, 1000);\r\n  }\r\n\r\n  fillArray(size) {\r\n    var array = Array(size).fill();\r\n    for (var index = 0; index < array.length; index++) {\r\n      array[index] = index;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  nextTurn(n) {\r\n    // TODO: get next player from api calls\r\n    // currently a placeholder\r\n    return Math.floor(Math.random() * n);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer();\r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n\r\n      // Publish move to the opponent's board    \r\n      this.publishMove(msg.message.index, msg.message.piece);\r\n\r\n      // Start a new game\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          // update scores\r\n          squares: this.fillArray(8),\r\n        });\r\n\r\n        this.round = 0;\r\n        this.scores = Array(8).fill(0);\r\n        this.gameOver = false;\r\n        this.counter = 0;\r\n        this.answer = 0;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n\t// Update score for the winner\r\n  updateScore = (winner) => {\r\n    // TODO: Implement function\r\n\r\n\t\t// End the game once there is a winner\r\n\t\t// this.gameOver = true;\r\n\t\t// this.newRound(winner);\t\r\n  }\r\n  \r\n  checkForWinner = () => {\r\n\r\n    // All rounds have been completed\r\n    if (this.round === 4) {\r\n      this.gameOver = true;\r\n      if(this.props.isRoomCreator) {\r\n        Swal.fire({      \r\n              position: 'top',\r\n              allowOutsideClick: false,\r\n              title: 'Game Over',\r\n              text: 'Ready for next round?',\r\n              showCancelButton: true,\r\n              confirmButtonColor: 'rgb(208,33,41)',\r\n              cancelButtonColor: '#aaa',\r\n              cancelButtonText: 'Nope',\r\n              confirmButtonText: 'Yea!',\r\n              width: 275,\r\n            }).then((result) => {\r\n              // Start a new round\r\n              if (result.value) {\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    reset: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n      \r\n              else{\r\n                // End the game\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    endGame: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n            })      \r\n          \r\n      } else {\r\n      Swal.fire({  \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: 'Game Over',\r\n            text: 'Waiting for a new round...',\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            width: 275\r\n          });\r\n        }\r\n    }\r\n  };\r\n   \r\n  // Publishing an opponent's move onto the board\r\n  publishMove = (index, piece) => {\r\n    var squares = this.state.squares;\r\n\r\n    squares[index] = piece;\r\n\r\n    this.setState({\r\n      // update scores\r\n      squares: squares,\r\n    });\r\n    \r\n    if (index === this.answer) {\r\n      this.scores[index] += 1;\r\n    }\r\n\r\n    this.checkForWinner()\r\n  }\r\n\r\n  // Making a move on the board and publishing it\r\n  onMakeMove = (index) => {\r\n    var squares = this.state.squares;\r\n\r\n    // Update chosen button to show that it's been clicked\r\n    if(squares[index]) { \r\n      squares[index] = 'X';\r\n\r\n       this.setState({\r\n         squares: squares,\r\n       });\r\n\r\n      // Publish move to the channel\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          index: index,\r\n          piece: 'X',\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n\r\n      // Check if there is a winner\r\n      this.checkForWinner();\r\n    }\r\n  }\r\n*/\r\n// Instructions\r\n//   How to Play\r\n// Up to 8 players may join a game, be sure to share the join code with your friends!\r\n// During each round, the game will play a song from one of the playerâ€™s Spotify playlist.\r\n// Players then have to select the user whose playlist they think the song is from.\r\n// Correct answers get 1 point, and wrong answers get 0 points.\r\n// After 20 rounds, the player with the most number of points wins!\r\n\r\n  render() {\r\n    /*\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n    */\r\n    return (\r\n \r\n      <div class=\"container-center-horizontal\">\r\n      <div class=\"game-screen-1 screen\">\r\n        <div class=\"flex-row-1\">\r\n          <img\r\n            class=\"mystery-music-logo3-1\"\r\n            src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/mysterymusic-logo3-1@2x.png\"\r\n          />\r\n          <div class=\"overlap-group\">\r\n            <h1 class=\"text-1\">Guess Whose Playlist?</h1>\r\n            <div class=\"chevron-down\">\r\n              <img\r\n                class=\"vector\"\r\n                src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector@2x.svg\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"flex-row-3\">\r\n          <div class=\"overlap-group1\">\r\n            <img\r\n              class=\"vector-197\"\r\n              src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector-197@2x.svg\"\r\n            />\r\n          </div>\r\n          <div class=\"flex-col\">\r\n            <div class=\"album-cover\"></div>\r\n            <div class=\"play-bar\">\r\n              <div class=\"overlap-group3\">\r\n                <div class=\"rectangle\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"overlap-group2\">\r\n            <div class=\"leaderboard-example\">\r\n              <div class=\"overlap-group3-1\">\r\n                <div class=\"name-1 karla-normal-black-24px\">Linda</div>\r\n                <img\r\n                  class=\"star-1\"\r\n                  src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/star-1@2x.svg\"\r\n                />\r\n                <div class=\"number-1 karla-bold-black-24px\">6</div>\r\n              </div>\r\n              <div class=\"flex-row-2\">\r\n                <div class=\"name-2 karla-normal-black-24px\">Lindsay</div>\r\n                <div class=\"number-2 karla-bold-black-24px\">5</div>\r\n              </div>\r\n              <div class=\"flex-row\">\r\n                <div class=\"egret karla-normal-black-24px\">Egret</div>\r\n                <div class=\"number karla-bold-black-24px\">3</div>\r\n              </div>\r\n              <div class=\"flex-row-4\">\r\n                <div class=\"name karla-normal-black-24px\">David</div>\r\n                <div class=\"number-3 karla-bold-black-24px\">1</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}