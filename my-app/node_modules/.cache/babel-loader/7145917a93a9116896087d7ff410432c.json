{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      // set title for displaying people who were correct\n      let title = winner === null ? 'Tie game!' : `Player ${winner} won!`; // Show this if new round\n\n      if (this.gameOver) {\n        Swal.fire({\n          position: 'top',\n          allowOutsideClick: false,\n          title: title,\n          text: 'Waiting for a new round...',\n          confirmButtonColor: 'rgb(208,33,41)',\n          width: 275\n        }); // this.turn = ;\n      } // Show this to the room creator\n      else if (this.props.isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: title,\n            text: 'Ready for next round?',\n            showCancelButton: true,\n            confirmButtonColor: 'rgb(208,33,41)',\n            cancelButtonColor: '#aaa',\n            cancelButtonText: 'Nope',\n            confirmButtonText: 'Yea!',\n            width: 275\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceWinner = winner => {\n      // TODO: Implement function\n      // End the game once there is a winner\n      this.gameOver = true;\n      this.newRound(winner);\n    };\n\n    this.checkForWinner = () => {\n      // Possible winning endgames (max round, score?)\n      this.counter++; // All rounds have been completed\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.publishMove = (index, piece) => {\n      const squares = this.state.squares;\n      squares[index] = piece;\n      this.round += 1;\n      this.setState({\n        // update scores\n        scores: Array(this.props.size).fill(''),\n        whoseTurn: nextTurn(this.props.whoseTurn)\n      });\n      this.checkForWinner(scores);\n    };\n\n    this.onMakeMove = index => {\n      const squares = this.state.squares; // Check if the square is empty and if it's the player's turn to make a move\n\n      if (!squares[index]) {\n        squares[index] = 'X'; // this.setState({\n        //   squares: squares,\n        //   whosTurn: !this.state.whosTurn\n        // });\n        // // Other player's turn to make a move\n        // this.turn = (this.turn === 'X') ? 'O' : 'X';\n        // Publish move to the channel\n\n        this.props.pubnub.publish({\n          message: {\n            index: index,\n            piece: this.props.piece,\n            turn: this.turn\n          },\n          channel: this.props.gameChannel\n        }); // Check if there is a winner\n\n        this.checkForWinner(squares);\n      }\n    };\n\n    this.state = {\n      // get api call to call song player pairs\n      // wooo\n      squares: Array(9).fill(0) // these are what people click on\n      // get list of scores for players in game\n      // imagine we can get this/store it in database?\n      //whoseTurn: 0 // api call to get song player pair\n\n    };\n    this.scores = Array(this.props.size).fill(0);\n    this.gameOver = false;\n    this.round = 0;\n  }\n\n  nextTurn(n) {\n    if (n = this.props.size) {\n      return 0;\n    } else {\n      return n + 1;\n    }\n  }\n\n  componentDidMount() {// this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n    //   // Publish move to the opponent's board\n    //   if(msg.message.turn === this.props.player){\n    //     this.publishMove(msg.message.index, msg.message.player);\n    //   }\n    //   // Start a new round\n    //   else if(msg.message.reset){\n    //     this.setState({\n    //       // update scores\n    //       scores: Array(this.props.size).fill(0),\n    //       whoseTurn : nextTurn(this.props.whoseTurn)\n    //     });\n    //     this.gameOver = false;\n    //     this.round += 1;\n    //     Swal.close()\n    //   }\n    //   // End the game and go back to the lobby\n    //   else if(msg.message.endGame){\n    //     Swal.close();\n    //     this.props.endGame();\n    //   }\n    // });\n  }\n\n  render() {\n    let status; // Change to current round\n\n    status = `${this.round}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board // squares={this.state.squares}\n        , {\n          onClick: index => this.onMakeMove(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-info\",\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"// TODO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","title","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","isRoomCreator","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","checkForWinner","counter","publishMove","index","piece","squares","state","round","setState","scores","Array","size","fill","whoseTurn","nextTurn","onMakeMove","turn","n","componentDidMount","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      // get api call to call song player pairs\r\n      // wooo\r\n\r\n      squares: Array(9).fill(0), // these are what people click on\r\n      // get list of scores for players in game\r\n      // imagine we can get this/store it in database?\r\n      //whoseTurn: 0 // api call to get song player pair\r\n    };\r\n\r\n    this.scores = Array(this.props.size).fill(0);\r\n    this.gameOver = false;\r\n    this.round = 0;\r\n  }\r\n\r\n  nextTurn(n) {\r\n    if (n = this.props.size) {\r\n      return 0;\r\n    } else {\r\n      return n + 1;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n    //   // Publish move to the opponent's board\r\n    //   if(msg.message.turn === this.props.player){\r\n    //     this.publishMove(msg.message.index, msg.message.player);\r\n    //   }\r\n\r\n    //   // Start a new round\r\n    //   else if(msg.message.reset){\r\n    //     this.setState({\r\n    //       // update scores\r\n    //       scores: Array(this.props.size).fill(0),\r\n    //       whoseTurn : nextTurn(this.props.whoseTurn)\r\n    //     });\r\n\r\n    //     this.gameOver = false;\r\n    //     this.round += 1;\r\n    //     Swal.close()\r\n    //   }\r\n\r\n    //   // End the game and go back to the lobby\r\n    //   else if(msg.message.endGame){\r\n    //     Swal.close();\r\n    //     this.props.endGame();\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  newRound = (winner) => {\r\n    // set title for displaying people who were correct\r\n    let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\r\n    // Show this if new round\r\n    if(this.gameOver){\r\n      Swal.fire({  \r\n        position: 'top',\r\n        allowOutsideClick: false,\r\n        title: title,\r\n        text: 'Waiting for a new round...',\r\n        confirmButtonColor: 'rgb(208,33,41)',\r\n        width: 275\r\n      });\r\n      // this.turn = ;\r\n    } \r\n\r\n    // Show this to the room creator\r\n    else if(this.props.isRoomCreator && this.gameOver){\r\n      Swal.fire({      \r\n        position: 'top',\r\n        allowOutsideClick: false,\r\n        title: title,\r\n        text: 'Ready for next round?',\r\n        showCancelButton: true,\r\n        confirmButtonColor: 'rgb(208,33,41)',\r\n        cancelButtonColor: '#aaa',\r\n        cancelButtonText: 'Nope',\r\n        confirmButtonText: 'Yea!',\r\n        width: 275,\r\n      }).then((result) => {\r\n        // Start a new round\r\n        if (result.value) {\r\n          this.props.pubnub.publish({\r\n            message: {\r\n              reset: true\r\n            },\r\n            channel: this.props.gameChannel\r\n          });\r\n        }\r\n\r\n        else{\r\n          // End the game\r\n          this.props.pubnub.publish({\r\n            message: {\r\n              endGame: true\r\n            },\r\n            channel: this.props.gameChannel\r\n          });\r\n        }\r\n      })      \r\n    }\r\n   }\r\n\r\n\t// Update score for the winner\r\n  announceWinner = (winner) => {\r\n    // TODO: Implement function\r\n\r\n\t\t// End the game once there is a winner\r\n\t\tthis.gameOver = true;\r\n\t\tthis.newRound(winner);\t\r\n  }\r\n  \r\n  checkForWinner = () => {\r\n    // Possible winning endgames (max round, score?)\r\n\r\n        this.counter++;\r\n        // All rounds have been completed\r\n        if(this.counter === 9){\r\n          this.gameOver = true;\r\n          this.newRound(null);\r\n        }\r\n  };\r\n   \r\n  // Opponent's move is published to the board\r\n  publishMove = (index, piece) => {\r\n    const squares = this.state.squares;\r\n    squares[index] = piece;\r\n\r\n    this.round += 1;\r\n\r\n    this.setState({\r\n      // update scores\r\n      scores: Array(this.props.size).fill(''),\r\n      whoseTurn : nextTurn(this.props.whoseTurn)\r\n    });\r\n\r\n    this.checkForWinner(scores)\r\n  }\r\n\r\n  onMakeMove = (index) => {\r\n    const squares = this.state.squares;\r\n\r\n    // Check if the square is empty and if it's the player's turn to make a move\r\n    if(!squares[index]) { \r\n      squares[index] = 'X';\r\n\r\n      // this.setState({\r\n      //   squares: squares,\r\n      //   whosTurn: !this.state.whosTurn\r\n      // });\r\n  \r\n      // // Other player's turn to make a move\r\n      // this.turn = (this.turn === 'X') ? 'O' : 'X';\r\n\r\n      // Publish move to the channel\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          index: index,\r\n          piece: this.props.piece,\r\n          turn: this.turn\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n\r\n      // Check if there is a winner\r\n      this.checkForWinner(squares)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"board\">\r\n          <Board\r\n              // squares={this.state.squares}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />  \r\n            <p className=\"status-info\">{status}</p>        \r\n        </div>\r\n        \r\n        <div className=\"scores-container\">\r\n          <div>\r\n            // TODO\r\n          </div>\r\n        </div>   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}