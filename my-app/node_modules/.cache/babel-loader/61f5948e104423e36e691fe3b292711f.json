{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\App.js\";\n// App.js\nimport React, { Component } from 'react';\nimport Game from './Game';\nimport game from './Board';\nimport * as PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport axios from 'axios';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPressCreate = e => {\n      this.size = 1; // Create a random name for the channel\n\n      this.roomId = shortid.generate().substring(0, 5);\n      this.lobbyChannel = 'spotifylobby--' + this.roomId; //endpoint for creating a new game in databsae\n\n      const newGame = {\n        joincode: this.roomId\n      };\n      axios.post('http://localhost:5000/games/add', newGame).then(res => console.log(res.data));\n      this.pubnub.subscribe({\n        channels: [this.lobbyChannel],\n        withPresence: true\n      }); // Open the modal sweetalert2\n\n      Swal.mixin({\n        confirmButtonText: 'Next &rarr;',\n        showCancelButton: true,\n        progressSteps: ['1', '2']\n      }).queue([{\n        title: 'Share this room ID with your friend',\n        text: this.roomId\n      }, {\n        title: 'Type your username here',\n        input: 'text'\n      }]).then(result => {\n        if (result.value) {\n          // const answers = JSON.stringify(result.value)\n          Swal.fire({\n            html: `\n            Your username:\n            <pre><code>${result.value[1]}</code></pre>\n          `,\n            confirmButtonText: 'Play!'\n          });\n          this.setState({\n            player: result.value[1],\n            isRoomCreator: true,\n            isDisabled: true,\n            // Disable the 'Create' button\n            myTurn: true // Room creator makes the 1st move\n\n          }); //endpoint for adding a new player to a game in databsae\n\n          const newPlayer = {\n            joincode: result.value[0],\n            name: \"filler\",\n            id: result.value[1]\n          };\n          axios.post('http://localhost:5000/games/addPlayer', newPlayer).then(res => console.log(res.data));\n        }\n      });\n    };\n\n    this.onPressJoin = e => {\n      Swal.mixin({\n        confirmButtonText: 'Next &rarr;',\n        showCancelButton: true,\n        progressSteps: ['1', '2']\n      }).queue([{\n        inputPlaceholder: 'Enter the room id',\n        input: 'text'\n      }, {\n        title: 'Type your username here',\n        input: 'text'\n      }]).then(result => {\n        if (result.value) {\n          // const answers = JSON.stringify(result.value)\n          Swal.fire({\n            html: `\n            Your username:\n            <pre><code>${result.value[1]}</code></pre>\n          `,\n            confirmButtonText: 'Play!'\n          }); // Check if the user typed a value in the input field\n\n          if (result.value[1]) {\n            this.joinRoom(result.value[0]);\n            this.setState({\n              player: result.value[1]\n            }); //endpoint for adding a new player to a game in databsae\n\n            const newPlayer = {\n              joincode: result.value[0],\n              name: \"filler\",\n              id: result.value[1]\n            };\n            axios.post('http://localhost:5000/games/addPlayer', newPlayer).then(res => console.log(res.data));\n          }\n        }\n      });\n    };\n\n    this.joinRoom = value => {\n      this.roomId = value;\n      this.lobbyChannel = 'spotifylobby--' + this.roomId; // Check the number of people in the channel\n\n      this.pubnub.hereNow({\n        channels: [this.lobbyChannel]\n      }).then(response => {\n        if (response.totalOccupancy < 8) {\n          this.size += 1;\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            title: 'Error',\n            text: 'Game is full.'\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.endGame = () => {\n      this.setState({\n        player: '',\n        isPlaying: false,\n        isRoomCreator: false,\n        isDisabled: false,\n        myTurn: false\n      });\n      this.lobbyChannel = null;\n      this.gameChannel = null;\n      this.roomId = null;\n      this.pubnub.unsubscribe({\n        channels: [this.lobbyChannel, this.gameChannel]\n      });\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\n    });\n    this.state = {\n      player: '',\n      // 1, 2, 3, 4, 5\n      isPlaying: false,\n      // Set to true when at least 2 players are in a channel\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n    this.lobbyChannel = null; // Lobby channel\n\n    this.gameChannel = null; // Game channel\n\n    this.size = null; // Number of players in room\n\n    this.roomId = null; // Unique id when player creates a room\n\n    this.pubnub.init(this); // Initialize PubNub\n  }\n\n  timer() {\n    var timeleft = 20;\n    var timer = setInterval(function () {\n      if (timeleft <= 0) {\n        clearInterval(timer);\n      }\n\n      timeleft -= 1;\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        // Start the game once an opponent joins the channel\n        if (msg.message.notRoomCreator) {\n          // Create a different channel for the game\n          this.gameChannel = 'spotifygame--' + this.roomId;\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n          this.setState({\n            isPlaying: true\n          }); // Close the modals if they are opened\n\n          Swal.close();\n        }\n      });\n    }\n  } // Create a room channel\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" MysteryMusic \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), !this.state.isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"create-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Host\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Start the game!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 44\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Create the game for other players to join\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button \",\n                disabled: this.state.isDisabled,\n                onClick: e => this.onPressCreate(),\n                children: \" Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"join-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Joiner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Join a game!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Join a game another player is hosting\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button\",\n                onClick: e => this.onPressJoin(),\n                children: \" Join\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), this.state.isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Your room code: \", this.roomId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), \"// TODO: get size from database\", /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Number of people in game: \", this.size]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Game, {\n          pubnub: this.pubnub,\n          gameChannel: this.gameChannel,\n          player: this.player,\n          size: this.size,\n          isRoomCreator: this.state.isRoomCreator,\n          endGame: this.endGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/App.js"],"names":["React","Component","Game","game","PubNubReact","Swal","shortid","axios","App","constructor","props","onPressCreate","e","size","roomId","generate","substring","lobbyChannel","newGame","joincode","post","then","res","console","log","data","pubnub","subscribe","channels","withPresence","mixin","confirmButtonText","showCancelButton","progressSteps","queue","title","text","input","result","value","fire","html","setState","player","isRoomCreator","isDisabled","myTurn","newPlayer","name","id","onPressJoin","inputPlaceholder","joinRoom","hereNow","response","totalOccupancy","publish","message","notRoomCreator","channel","catch","error","endGame","isPlaying","gameChannel","unsubscribe","publishKey","subscribeKey","state","init","timer","timeleft","setInterval","clearInterval","componentWillUnmount","componentDidUpdate","getMessage","msg","close","render"],"mappings":"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","sourcesContent":["// App.js\r\nimport React, { Component } from 'react';\r\nimport Game from './Game';\r\nimport game from './Board';\r\nimport * as PubNubReact from 'pubnub-react';\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from 'shortid';\r\nimport axios from 'axios';\r\nimport './index.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\r\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\r\n    });\r\n    this.state = {\r\n      player: '', // 1, 2, 3, 4, 5\r\n      isPlaying: false, // Set to true when at least 2 players are in a channel\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    };\r\n    this.lobbyChannel = null; // Lobby channel\r\n    this.gameChannel = null; // Game channel\r\n    this.size = null; // Number of players in room\r\n    this.roomId = null; // Unique id when player creates a room\r\n    this.pubnub.init(this); // Initialize PubNub\r\n  }\r\n\r\n  timer() {\r\n    var timeleft = 20;\r\n    var timer = setInterval(function(){\r\n    if (timeleft <= 0){\r\n    clearInterval(timer);\r\n    }\r\n    timeleft -= 1;\r\n}, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if (this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n        // Start the game once an opponent joins the channel\r\n        if (msg.message.notRoomCreator) {\r\n          // Create a different channel for the game\r\n          this.gameChannel = 'spotifygame--' + this.roomId;\r\n\r\n          this.pubnub.subscribe({\r\n            channels: [this.gameChannel]\r\n          });\r\n\r\n          this.setState({\r\n            isPlaying: true\r\n          });\r\n\r\n          // Close the modals if they are opened\r\n          Swal.close();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    this.size = 1;\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0, 5);\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    //endpoint for creating a new game in databsae\r\n    const newGame = {\r\n      joincode: this.roomId,\r\n    };\r\n    axios.post('http://localhost:5000/games/add', newGame)\r\n      .then(res => console.log(res.data));\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true\r\n    });\r\n\r\n    // Open the modal sweetalert2\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2']\r\n    }).queue([\r\n      {\r\n        title: 'Share this room ID with your friend',\r\n        text: this.roomId\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n\r\n        this.setState({\r\n          player: result.value[1],\r\n          isRoomCreator: true,\r\n          isDisabled: true, // Disable the 'Create' button\r\n          myTurn: true, // Room creator makes the 1st move\r\n        });\r\n\r\n        //endpoint for adding a new player to a game in databsae\r\n        const newPlayer = {\r\n          joincode: result.value[0],\r\n          name: \"filler\",\r\n          id: result.value[1]\r\n        };\r\n        axios.post('http://localhost:5000/games/addPlayer', newPlayer)\r\n          .then(res => console.log(res.data));\r\n      }\r\n    })\r\n  }\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2']\r\n    }).queue([\r\n      {\r\n        inputPlaceholder: 'Enter the room id',\r\n        input: 'text'\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n        // Check if the user typed a value in the input field\r\n        if (result.value[1]) {\r\n          this.joinRoom(result.value[0]);\r\n\r\n          this.setState({\r\n            player: result.value[1],\r\n          });\r\n\r\n          //endpoint for adding a new player to a game in databsae\r\n          const newPlayer = {\r\n            joincode: result.value[0],\r\n            name: \"filler\",\r\n            id: result.value[1]\r\n          };\r\n\r\n          axios.post('http://localhost:5000/games/addPlayer', newPlayer)\r\n            .then(res => console.log(res.data));\r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub.hereNow({\r\n      channels: [this.lobbyChannel],\r\n    }).then((response) => {\r\n      if (response.totalOccupancy < 8) {\r\n        this.size += 1;\r\n\r\n        this.pubnub.subscribe({\r\n          channels: [this.lobbyChannel],\r\n          withPresence: true\r\n        });\r\n\r\n        this.pubnub.publish({\r\n          message: {\r\n            notRoomCreator: true,\r\n          },\r\n          channel: this.lobbyChannel\r\n        });\r\n      }\r\n      else {\r\n        // Game in progress\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'Game is full.',\r\n        })\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // Reset everything\r\n  endGame = () => {\r\n    this.setState({\r\n      player: '',\r\n      isPlaying: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    });\r\n\r\n    this.lobbyChannel = null;\r\n    this.gameChannel = null;\r\n    this.roomId = null;\r\n\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"title\">\r\n          <h1> MysteryMusic </h1>\r\n        </div>\r\n        {\r\n          !this.state.isPlaying &&\r\n          <div className=\"game\">\r\n            <div className=\"board\">\r\n              <div className=\"button-container\">\r\n                <div id=\"create-container\">\r\n                  <h2>Host</h2>\r\n                  <h3>Start the game!</h3> <br></br>\r\n                  <h4>Create the game for other players to join</h4>\r\n                  <button\r\n                    className=\"button \"\r\n                    disabled={this.state.isDisabled}\r\n                    onClick={(e) => this.onPressCreate()}\r\n                  > Create\r\n                </button>\r\n                </div>\r\n                <div id=\"join-container\">\r\n                  <h2>Joiner</h2>\r\n                  <h3>Join a game!</h3> <br></br>\r\n                  <h4>Join a game another player is hosting</h4>\r\n                  <button\r\n                    className=\"button\"\r\n                    onClick={(e) => this.onPressJoin()}\r\n                  > Join\r\n                </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n\r\n        {\r\n          this.state.isPlaying &&\r\n          <div className=\"game\">\r\n            <h3>Your room code: {this.roomId}</h3>\r\n            // TODO: get size from database\r\n            <h3>Number of people in game: {this.size}</h3>\r\n          <Game\r\n            pubnub={this.pubnub}\r\n            gameChannel={this.gameChannel}\r\n            player={this.player}\r\n            size={this.size}\r\n            isRoomCreator={this.state.isRoomCreator}\r\n            endGame={this.endGame}\r\n          />\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}