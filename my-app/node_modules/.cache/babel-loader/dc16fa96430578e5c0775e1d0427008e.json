{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {// // set title for displaying people who were correct\n      // let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n      // // Show this if new round\n      // if(this.gameOver){\n      //   Swal.fire({  \n      //     position: 'top',\n      //     allowOutsideClick: false,\n      //     title: title,\n      //     text: 'Waiting for a new round...',\n      //     confirmButtonColor: 'rgb(208,33,41)',\n      //     width: 275\n      //   });\n      //   // this.turn = ;\n      // } \n      // // Show this to the room creator\n      // else if(this.props.isRoomCreator && this.gameOver){\n      //   Swal.fire({      \n      //     position: 'top',\n      //     allowOutsideClick: false,\n      //     title: title,\n      //     text: 'Ready for next round?',\n      //     showCancelButton: true,\n      //     confirmButtonColor: 'rgb(208,33,41)',\n      //     cancelButtonColor: '#aaa',\n      //     cancelButtonText: 'Nope',\n      //     confirmButtonText: 'Yea!',\n      //     width: 275,\n      //   }).then((result) => {\n      //     // Start a new round\n      //     if (result.value) {\n      //       this.props.pubnub.publish({\n      //         message: {\n      //           reset: true\n      //         },\n      //         channel: this.props.gameChannel\n      //       });\n      //     }\n      //     else{\n      //       // End the game\n      //       this.props.pubnub.publish({\n      //         message: {\n      //           endGame: true\n      //         },\n      //         channel: this.props.gameChannel\n      //       });\n      //     }\n      //   })      \n      // }\n    };\n\n    this.updateScore = winner => {// TODO: Implement function\n      // End the game once there is a winner\n      // this.gameOver = true;\n      // this.newRound(winner);\t\n    };\n\n    this.checkForWinner = () => {\n      // All rounds have been completed\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.announceWinner(\"you\");\n      }\n    };\n\n    this.publishMove = (index, piece) => {\n      var squares = this.state.squares;\n      squares[index] = piece;\n      this.counter += 1;\n\n      if (this.counter === 2) {\n        this.counter = 0;\n        squares = Array(8).fill(\"temp\");\n        this.round += 1;\n      }\n\n      this.setState({\n        // update scores\n        squares: squares\n      });\n      this.checkForWinner();\n    };\n\n    this.onMakeMove = index => {\n      var squares = this.state.squares; // Check if the square is empty and if we can make a move\n\n      if (squares[index]) {\n        squares[index] = 'X';\n        this.setState({\n          squares: squares //   whosTurn: !this.state.whosTurn\n\n        }); // // Other player's turn to make a move\n        // this.turn = (this.turn === 'X') ? 'O' : 'X';\n        // Publish move to the channel\n\n        this.props.pubnub.publish({\n          message: {\n            index: index,\n            piece: 'X',\n            turn: this.turn\n          },\n          channel: this.props.gameChannel\n        }); // Check if there is a winner\n\n        this.checkForWinner();\n      }\n    };\n\n    this.state = {\n      squares: Array(8).fill(\"temp\") // these are what people click on\n      // get list of scores for players in game\n      // imagine we can get this/store it in database?\n\n    };\n    this.round = 0;\n    this.scores = Array(this.props.size).fill(0);\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  nextTurn(n) {// get next player from api calls\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      this.publishMove(msg.message.index, msg.message.piece); // Start a new game?\n\n      if (msg.message.reset) {\n        this.setState({\n          // update scores\n          squares: Array(this.props.size).fill(3)\n        });\n        this.gameOver = false;\n        this.round = 0;\n        Swal.close();\n      } // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n          Swal.close();\n          this.props.endGame();\n        }\n    });\n  }\n\n  render() {\n    let status; // Change to current round\n\n    status = `${this.round}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: \"Guess who!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          size: this.props.size,\n          onClick: index => this.onMakeMove(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-info\",\n          children: [\"Round: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"SCORES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","updateScore","checkForWinner","counter","gameOver","announceWinner","publishMove","index","piece","squares","state","Array","fill","round","setState","onMakeMove","pubnub","publish","message","turn","channel","gameChannel","scores","size","nextTurn","n","componentDidMount","getMessage","msg","reset","close","endGame","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      squares: Array(8).fill(\"temp\"), // these are what people click on\r\n      // get list of scores for players in game\r\n      // imagine we can get this/store it in database?\r\n\r\n    };\r\n    this.round = 0;\r\n    this.scores = Array(this.props.size).fill(0);\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n  }\r\n\r\n  nextTurn(n) {\r\n    // get next player from api calls\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n      // Publish move to the opponent's board\r\n      \r\n      this.publishMove(msg.message.index, msg.message.piece);\r\n      \r\n\r\n      // Start a new game?\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          // update scores\r\n          squares: Array(this.props.size).fill(3),\r\n        });\r\n\r\n        this.gameOver = false;\r\n        this.round = 0;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n  newRound = (winner) => {\r\n    // // set title for displaying people who were correct\r\n    // let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\r\n    // // Show this if new round\r\n    // if(this.gameOver){\r\n    //   Swal.fire({  \r\n    //     position: 'top',\r\n    //     allowOutsideClick: false,\r\n    //     title: title,\r\n    //     text: 'Waiting for a new round...',\r\n    //     confirmButtonColor: 'rgb(208,33,41)',\r\n    //     width: 275\r\n    //   });\r\n    //   // this.turn = ;\r\n    // } \r\n\r\n    // // Show this to the room creator\r\n    // else if(this.props.isRoomCreator && this.gameOver){\r\n    //   Swal.fire({      \r\n    //     position: 'top',\r\n    //     allowOutsideClick: false,\r\n    //     title: title,\r\n    //     text: 'Ready for next round?',\r\n    //     showCancelButton: true,\r\n    //     confirmButtonColor: 'rgb(208,33,41)',\r\n    //     cancelButtonColor: '#aaa',\r\n    //     cancelButtonText: 'Nope',\r\n    //     confirmButtonText: 'Yea!',\r\n    //     width: 275,\r\n    //   }).then((result) => {\r\n    //     // Start a new round\r\n    //     if (result.value) {\r\n    //       this.props.pubnub.publish({\r\n    //         message: {\r\n    //           reset: true\r\n    //         },\r\n    //         channel: this.props.gameChannel\r\n    //       });\r\n    //     }\r\n\r\n    //     else{\r\n    //       // End the game\r\n    //       this.props.pubnub.publish({\r\n    //         message: {\r\n    //           endGame: true\r\n    //         },\r\n    //         channel: this.props.gameChannel\r\n    //       });\r\n    //     }\r\n    //   })      \r\n    // }\r\n   }\r\n\r\n\t// Update score for the winner\r\n  updateScore = (winner) => {\r\n    // TODO: Implement function\r\n\r\n\t\t// End the game once there is a winner\r\n\t\t// this.gameOver = true;\r\n\t\t// this.newRound(winner);\t\r\n  }\r\n  \r\n  checkForWinner = () => {\r\n\r\n    // All rounds have been completed\r\n    if (this.counter === 9) {\r\n      this.gameOver = true;\r\n      this.announceWinner(\"you\");\r\n    }\r\n  };\r\n   \r\n  // Opponent's move is published to the board\r\n  publishMove = (index, piece) => {\r\n    var squares = this.state.squares;\r\n\r\n    squares[index] = piece;\r\n\r\n    this.counter += 1;\r\n\r\n    if(this.counter === 2) {\r\n      this.counter = 0;\r\n      squares = Array(8).fill(\"temp\");\r\n      this.round += 1;\r\n    }\r\n\r\n    this.setState({\r\n      // update scores\r\n      squares: squares,\r\n    });\r\n\r\n    this.checkForWinner()\r\n  }\r\n\r\n  onMakeMove = (index) => {\r\n    var squares = this.state.squares;\r\n\r\n    // Check if the square is empty and if we can make a move\r\n    if(squares[index]) { \r\n      squares[index] = 'X';\r\n\r\n       this.setState({\r\n         squares: squares,\r\n      //   whosTurn: !this.state.whosTurn\r\n       });\r\n  \r\n      // // Other player's turn to make a move\r\n      // this.turn = (this.turn === 'X') ? 'O' : 'X';\r\n\r\n      // Publish move to the channel\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          index: index,\r\n          piece: 'X',\r\n          turn: this.turn\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n\r\n      // Check if there is a winner\r\n      this.checkForWinner()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"prompt\">\r\n          Guess who!\r\n        </div>\r\n        <br></br>\r\n        <div className=\"board\">\r\n          <Board\r\n              squares={this.state.squares}\r\n              size={this.props.size}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />  \r\n            <p className=\"status-info\">Round: {status}</p>        \r\n        </div>\r\n        \r\n        <div className=\"scores-container\">\r\n          <div>\r\n            SCORES\r\n          </div>\r\n        </div>   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}