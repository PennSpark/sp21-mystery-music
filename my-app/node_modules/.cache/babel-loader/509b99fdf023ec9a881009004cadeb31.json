{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport './Game.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst option_letters = ['A', 'B', 'C', 'D'];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = () => {\n      var scores = this.state.scores; // DONE (yet to be tested)\n      // check guess and compare to actual answer\n      // if correct use props.publish to push score to other players to update their render\n      // also update current state (setstate) to update local render (done below)\n\n      if (this.state.guess === this.state.answer) {\n        scores[this.state.answer] = scores[this.state.answer] + 1;\n        this.props.pubnub.publish({\n          message: {\n            player: index\n          },\n          channel: this.props.gameChannel\n        });\n      } // increment round\n\n\n      console.log(\"round\" + this.state.round); // use nextTurn to set new answer from db when running\n      // this.nextTurn();\n\n      this.state.answer = this.state.round;\n      this.state.console.log(\"new answer: \" + this.answer);\n      this.setState({\n        scores: scores,\n        round: this.state.round + 1\n      }); // starts new timer for next round\n\n      this.timer();\n    };\n\n    this.timer = () => {\n      var timeleft = 10;\n      var timer = setInterval(() => {\n        if (timeleft <= 0) {\n          clearInterval(timer); // add new state if i want to display timer on screen? \n          // implement if there is time\n          //document.getElementById(\"countdown\").innerHTML = \"Finished\";\n          //document.getElementById(\"status\").innerHTML = 'Round:' + x;\n\n          console.log(\"timer finish!\"); // end game if 4 rounds have been played, replace 4 with global var later\n\n          if (this.state.round < 4) {\n            this.newRound();\n          } else {\n            this.checkForWinner();\n          }\n        } else {\n          if (timeleft % 5 === 0) {\n            console.log(timeleft);\n          } //document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\n\n        }\n\n        timeleft -= 1;\n      }, 1000);\n    };\n\n    this.updateScore = winner => {\n      const updateScoreThing = {\n        joinCode: this.roomId,\n        playerId: winner,\n        score: this.score\n      };\n      axios.post('http://localhost:5001/games/updateScore', updateScoreThing).then(res => console.log(res.data)); // End the game once there is a winner\n      // this.gameOver = true;\n      // this.newRound(winner);\t\n    };\n\n    this.checkForWinner = () => {\n      // All rounds have been completed\n      this.gameOver = true;\n\n      if (this.props.isRoomCreator) {\n        Swal.fire({\n          position: 'top',\n          allowOutsideClick: false,\n          title: 'Game Over',\n          text: 'Want to play again?',\n          showCancelButton: true,\n          confirmButtonColor: 'rgb(208,33,41)',\n          cancelButtonColor: '#aaa',\n          cancelButtonText: 'Nope',\n          confirmButtonText: 'Yea!',\n          width: 275\n        }).then(result => {\n          // Start a new round\n          if (result.value) {\n            this.props.pubnub.publish({\n              message: {\n                reset: true\n              },\n              channel: this.props.gameChannel\n            });\n          } else {\n            // End the game\n            this.props.pubnub.publish({\n              message: {\n                endGame: true\n              },\n              channel: this.props.gameChannel\n            });\n          }\n        });\n      } else {\n        Swal.fire({\n          position: 'top',\n          allowOutsideClick: false,\n          title: 'Game Over',\n          text: 'Waiting for a new round...',\n          confirmButtonColor: 'rgb(208,33,41)',\n          width: 275\n        });\n      }\n    };\n\n    this.publishMove = index => {\n      var scores = this.state.scores;\n      scores[index] = scores[index] + 1;\n      this.setState({\n        // update scores\n        scores: scores\n      }); // no need to check correctness since done in new move,\n      // just update scores based on info from pubnub message \n      // this function is called in componentDidMount\n    };\n\n    this.onMakeMove = index => {\n      var squares = this.state.squares;\n      console.log(index);\n      this.setState({\n        guess: index\n      }); // if (index == this.answer) { \n      //   console.log(\"correct!\");\n      //   // Update chosen button to show that it's been clicked\n      //   // squares[index] = 'X';\n      //   this.score += 1;\n      //    this.setState({\n      //      squares: squares,\n      //    });\n      // Publish move to the channel\n      // this.props.pubnub.publish({\n      //   message: {\n      //     player: index,\n      //    \n      //   },\n      //   channel: this.props.gameChannel\n      // });  \n      // }\n    };\n\n    this.player = this.props.player;\n    this.roomId = this.props.roomId;\n    this.databaseGameId = this.props.databaseGameId;\n    this.score = 0;\n    this.gameOver = false;\n    this.answer = 0;\n    this.state = {\n      // squares contains the player names in the game for the game board thing !\n      // these items must be in state in order to update the screen (render())\n      // when state is also updated\n      squares: option_letters,\n      size: 0,\n      round: 0,\n      scores: [],\n      guess: \"\",\n      answer: \"\",\n      currentSong: \"\"\n    };\n    console.log(\"size: \" + this.state.size);\n    console.log(\"player: \" + this.player);\n  } // function for each new round\n\n\n  // tbh unnecessary function bc it doesn't work?\n  // leaving here until fone in case it's useful\n  fillArray(size) {\n    var array = Array(size).fill();\n    axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId).then(response => {\n      for (var i = 0; i < response.data.size; i++) {\n        console.log(response.data.players[i].playerName);\n        array[i] = response.data.players[i].playerName;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return array;\n  } // retrieve next player song pair info, to be used in newRound()\n\n\n  nextTurn() {\n    axios.get('http://localhost:5001/games/getRandomPair/' + this.databaseGameId).then(response => {\n      //player id of song\n      this.answer = response.data[0].playerId;\n      console.log(this.answer); //player name of song if needed\n\n      console.log(response.data[0].playerName); //name of song if needed\n\n      this.state.currentSong = response.data[0].songName;\n      console.log(response.data[0].songName);\n    }).catch(error => {\n      console.log(error);\n    });\n  } // function runs whenever a new element is added to the DOM\n  // maybe switch to componentDidUpdate if more appropriate?\n  // because of pubnub, need to run pubnub to publish updated scores\n  // received from other players and aaaa\n\n\n  componentDidMount() {\n    // currently timer() (and game) starts on button push but\n    // that only runs locally for one player, idk if i should just \n    // make a statement that starts the game when there are 4 players\n    // i could use pubnub to start timer at the same time??? maybe but\n    // too much work and prev sol would be easier ig\n    // this.timer();\n    var squares = Array(this.state.size).fill(\"loading names\");\n    var scores = Array(this.state.size).fill(\"loading scores\"); //gets size(num of players in game) and updates squares\n\n    axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId).then(response => {\n      console.log(\"hi there\");\n      console.log(response);\n\n      for (var i = 0; i < response.data.size; i++) {\n        console.log(response.data.players[i].playerName);\n        squares[i] = response.data.players[i].playerName;\n        scores[i] = 0;\n      }\n\n      this.setState({\n        size: response.data.size,\n        squares: squares,\n        scores: scores\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // edit publish move to publish scoreboard instead?\n      // old copied code, currently publishes move to opponents' boards\n      // but not actually bc i commented out the code that sends the message    \n      this.publishMove(msg.message.index, msg.message.piece); // Start a new game\n\n      if (msg.message.reset) {\n        this.setState({\n          // update players\n          squares: this.fillArray(4),\n          round: 0\n        });\n        this.score = 0;\n        this.gameOver = false;\n        this.answer = 0;\n        Swal.close();\n      } // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n          Swal.close();\n          this.props.endGame();\n        }\n    });\n  } // Update db score if answer is correct\n  // not necessary bc i think i can use pubnub to keep track of scores?\n  // side note is pubnub even necessary with backend???\n  // so yeah bc there's no route to retrieve scores i'm not using this function!\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container-center-horizontal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"game-screen-1 screen\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"flex-row-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              class: \"mystery-music-logo3-1\",\n              src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/mysterymusic-logo3-1@2x.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"overlap-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                class: \"text-1\",\n                children: \"Guess Whose Playlist?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 13\n              }, this), \"Round: \", this.state.round, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 39\n              }, this), \"Song: \", this.state.currentSong]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"flex-row-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"overlap-group1\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"vector-197\",\n                src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector-197@2x.svg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"flex-col\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"album-cover\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"play-bar\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"overlap-group3-1\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"rectangle\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"overlap-group2\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"leaderboard-example\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"overlap-group3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"name-1 karla-normal-black-24px\",\n                    children: this.state.squares[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    class: \"star-1\",\n                    src: \"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/star-1@2x.svg\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"number-1 karla-bold-black-24px\",\n                    children: this.state.scores[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 383,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"flex-row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"name-2 karla-normal-black-24px\",\n                    children: this.state.squares[1]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 386,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"number-2 karla-bold-black-24px\",\n                    children: this.state.scores[1]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"flex-row-1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"egret karla-normal-black-24px\",\n                    children: this.state.squares[2]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"number karla-bold-black-24px\",\n                    children: this.state.scores[2]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"flex-row-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"name karla-normal-black-24px\",\n                    children: this.state.squares[3]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"number-3 karla-bold-black-24px\",\n                    children: this.state.scores[3]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 395,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 393,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            value: \"Start Game\",\n            onClick: () => this.timer(),\n            children: \"start timer  \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board\",\n            children: [/*#__PURE__*/_jsxDEV(Board, {\n              squares: this.state.squares,\n              size: this.props.size,\n              onClick: index => this.onMakeMove(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"countdown\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/Game.js"],"names":["React","Board","Swal","axios","option_letters","Game","Component","constructor","props","newRound","scores","state","guess","answer","pubnub","publish","message","player","index","channel","gameChannel","console","log","round","setState","timer","timeleft","setInterval","clearInterval","checkForWinner","updateScore","winner","updateScoreThing","joinCode","roomId","playerId","score","post","then","res","data","gameOver","isRoomCreator","fire","position","allowOutsideClick","title","text","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","width","result","value","reset","endGame","publishMove","onMakeMove","squares","databaseGameId","size","currentSong","fillArray","array","Array","fill","get","response","i","players","playerName","catch","error","nextTurn","songName","componentDidMount","getMessage","msg","piece","close","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\nimport './Game.css';\r\nimport axios from 'axios';\r\n\r\nconst option_letters = ['A', 'B', 'C', 'D'];\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.player = this.props.player;\r\n    this.roomId = this.props.roomId;\r\n    this.databaseGameId = this.props.databaseGameId;\r\n    this.score = 0;\r\n    this.gameOver = false;\r\n    this.answer = 0;\r\n\r\n    this.state = {\r\n      // squares contains the player names in the game for the game board thing !\r\n      // these items must be in state in order to update the screen (render())\r\n      // when state is also updated\r\n      squares: option_letters, \r\n      size : 0,\r\n      round : 0,\r\n      scores: [],\r\n      guess: \"\",\r\n      answer: \"\",\r\n      currentSong: \"\"\r\n    };\r\n\r\n    console.log(\"size: \" + this.state.size);\r\n    console.log(\"player: \" + this.player);\r\n  }\r\n\r\n  // function for each new round\r\n  newRound = () => {\r\n    var scores = this.state.scores;\r\n\r\n    // DONE (yet to be tested)\r\n    // check guess and compare to actual answer\r\n    // if correct use props.publish to push score to other players to update their render\r\n    // also update current state (setstate) to update local render (done below)\r\n\r\n    if (this.state.guess === this.state.answer) {\r\n      scores[this.state.answer] = scores[this.state.answer] + 1;\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          player: index,\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n    }\r\n\r\n    // increment round\r\n    console.log(\"round\" + this.state.round);\r\n\r\n    // use nextTurn to set new answer from db when running\r\n    // this.nextTurn();\r\n    this.state.answer = this.state.round;\r\n    this.state.\r\n    console.log(\"new answer: \" + this.answer);\r\n\r\n    this.setState({\r\n      scores: scores,\r\n      round: this.state.round + 1\r\n    });\r\n\r\n    // starts new timer for next round\r\n    this.timer();\r\n  }\r\n\r\n  // function used to determine the end of each round\r\n  timer = () => {\r\n    var timeleft = 10;\r\n    var timer = setInterval(() => {\r\n      if (timeleft <= 0) {\r\n        clearInterval(timer);\r\n        // add new state if i want to display timer on screen? \r\n        // implement if there is time\r\n        //document.getElementById(\"countdown\").innerHTML = \"Finished\";\r\n        //document.getElementById(\"status\").innerHTML = 'Round:' + x;\r\n        console.log(\"timer finish!\");\r\n        // end game if 4 rounds have been played, replace 4 with global var later\r\n        if (this.state.round < 4) {\r\n        this.newRound();\r\n      } else {\r\n        this.checkForWinner();\r\n      }\r\n      } else {\r\n        if (timeleft % 5 === 0) {\r\n          console.log(timeleft);\r\n        }\r\n        //document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\r\n      }\r\n      timeleft -= 1;\r\n    }, 1000);\r\n  }\r\n\r\n  // tbh unnecessary function bc it doesn't work?\r\n  // leaving here until fone in case it's useful\r\n  fillArray(size) {\r\n    var array = Array(size).fill();\r\n    axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId)\r\n    .then(response => {\r\n      for (var i = 0; i < response.data.size; i++){\r\n        console.log(response.data.players[i].playerName);\r\n        array[i] = response.data.players[i].playerName;\r\n      }\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    })\r\n\r\n    return array;\r\n  }\r\n  \r\n  // retrieve next player song pair info, to be used in newRound()\r\n  nextTurn() {\r\n    axios.get('http://localhost:5001/games/getRandomPair/' + this.databaseGameId)\r\n    .then(response => {\r\n      //player id of song\r\n      this.answer = response.data[0].playerId;\r\n      console.log(this.answer);\r\n      //player name of song if needed\r\n      console.log(response.data[0].playerName);\r\n      //name of song if needed\r\n      this.state.currentSong = response.data[0].songName;\r\n      console.log(response.data[0].songName);\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    })\r\n  }\r\n\r\n  // function runs whenever a new element is added to the DOM\r\n  // maybe switch to componentDidUpdate if more appropriate?\r\n  // because of pubnub, need to run pubnub to publish updated scores\r\n  // received from other players and aaaa\r\n  componentDidMount() {\r\n    // currently timer() (and game) starts on button push but\r\n    // that only runs locally for one player, idk if i should just \r\n    // make a statement that starts the game when there are 4 players\r\n    // i could use pubnub to start timer at the same time??? maybe but\r\n    // too much work and prev sol would be easier ig\r\n    // this.timer();\r\n    var squares = Array(this.state.size).fill(\"loading names\");\r\n    var scores = Array(this.state.size).fill(\"loading scores\");\r\n\r\n    //gets size(num of players in game) and updates squares\r\n    axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId)\r\n    .then(response => {\r\n      console.log(\"hi there\");\r\n      console.log(response);\r\n\r\n      for (var i = 0; i < response.data.size; i++){\r\n        console.log(response.data.players[i].playerName);\r\n        squares[i] = response.data.players[i].playerName;\r\n        scores[i] = 0;\r\n      }\r\n      \r\n        this.setState({\r\n          size : response.data.size,\r\n          squares: squares,\r\n          scores: scores\r\n        });\r\n     \r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    })\r\n\r\n    \r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n\r\n      // edit publish move to publish scoreboard instead?\r\n      // old copied code, currently publishes move to opponents' boards\r\n      // but not actually bc i commented out the code that sends the message    \r\n      this.publishMove(msg.message.index, msg.message.piece);\r\n\r\n      // Start a new game\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          // update players\r\n          squares: this.fillArray(4),\r\n          round: 0\r\n        });\r\n\r\n        this.score = 0;\r\n        this.gameOver = false;\r\n\r\n        this.answer = 0;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n\t// Update db score if answer is correct\r\n  // not necessary bc i think i can use pubnub to keep track of scores?\r\n  // side note is pubnub even necessary with backend???\r\n  // so yeah bc there's no route to retrieve scores i'm not using this function!\r\n  updateScore = (winner) => {\r\n\r\n    const updateScoreThing = {\r\n      joinCode: this.roomId,\r\n      playerId: winner,\r\n      score: this.score\r\n    };\r\n    axios.post('http://localhost:5001/games/updateScore', updateScoreThing)\r\n      .then(res => console.log(res.data));\r\n      \r\n\r\n\t\t// End the game once there is a winner\r\n\t\t// this.gameOver = true;\r\n\t\t// this.newRound(winner);\t\r\n  }\r\n\r\n  // bad function name, actually just displays pop up for when \r\n  // game is \r\n  // TODO: get player with top score and display\r\n  checkForWinner = () => {\r\n\r\n    // All rounds have been completed\r\n      this.gameOver = true;\r\n      if(this.props.isRoomCreator) {\r\n        Swal.fire({      \r\n              position: 'top',\r\n              allowOutsideClick: false,\r\n              title: 'Game Over',\r\n              text: 'Want to play again?',\r\n              showCancelButton: true,\r\n              confirmButtonColor: 'rgb(208,33,41)',\r\n              cancelButtonColor: '#aaa',\r\n              cancelButtonText: 'Nope',\r\n              confirmButtonText: 'Yea!',\r\n              width: 275,\r\n            }).then((result) => {\r\n              // Start a new round\r\n              if (result.value) {\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    reset: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n      \r\n              else{\r\n                // End the game\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    endGame: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n            })      \r\n          \r\n      } else {\r\n      Swal.fire({  \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: 'Game Over',\r\n            text: 'Waiting for a new round...',\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            width: 275\r\n          });\r\n        }\r\n  };\r\n   \r\n  // Publishing an opponent's score onto scoreboard\r\n  // setState should rerender screen automatically\r\n  publishMove = (index) => {\r\n    var scores = this.state.scores;\r\n    scores[index] = scores[index] + 1;\r\n\r\n    this.setState({\r\n      // update scores\r\n      scores: scores\r\n    });\r\n\r\n    // no need to check correctness since done in new move,\r\n    // just update scores based on info from pubnub message \r\n    // this function is called in componentDidMount\r\n\r\n  }\r\n\r\n  // function runs when a button on the gameboard is clicked\r\n  // don't need to check correctness, just update current state.guess\r\n  onMakeMove = (index) => {\r\n    var squares = this.state.squares;\r\n\r\n    console.log(index);\r\n\r\n    this.setState({\r\n      guess: index\r\n    });\r\n\r\n    // if (index == this.answer) { \r\n    //   console.log(\"correct!\");\r\n    //   // Update chosen button to show that it's been clicked\r\n    //   // squares[index] = 'X';\r\n\r\n    //   this.score += 1;\r\n\r\n    //    this.setState({\r\n    //      squares: squares,\r\n    //    });\r\n\r\n      // Publish move to the channel\r\n      // this.props.pubnub.publish({\r\n      //   message: {\r\n      //     player: index,\r\n      //    \r\n      //   },\r\n      //   channel: this.props.gameChannel\r\n      // });  \r\n    // }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"game\">\r\n         {/* You are player {this.player}\r\n        <div className=\"prompt\">\r\n          Guess who! {this.answer}\r\n        </div>\r\n        <br></br> */}\r\n        \r\n        {/* <div className=\"scores-container\">\r\n          <div>\r\n            SCORES {this.scores}\r\n          </div>\r\n        </div>   \r\n      </div> */}\r\n      \r\n      <div class=\"container-center-horizontal\">\r\n      <div class=\"game-screen-1 screen\">\r\n        <div class=\"flex-row-5\">\r\n          <img\r\n            class=\"mystery-music-logo3-1\"\r\n            src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/mysterymusic-logo3-1@2x.png\"\r\n          />\r\n          <div class=\"overlap-group\">\r\n            <h1 class=\"text-1\">Guess Whose Playlist?</h1>\r\n            Round: {this.state.round} <br/>\r\n            Song: {this.state.currentSong}\r\n          </div>\r\n        </div>\r\n        <div class=\"flex-row-4\">\r\n          <div class=\"overlap-group1\">\r\n            <img\r\n              class=\"vector-197\"\r\n              src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector-197@2x.svg\"\r\n            />\r\n          </div>\r\n          <div class=\"flex-col\">\r\n            <div class=\"album-cover\"></div>\r\n            <div class=\"play-bar\">\r\n              <div class=\"overlap-group3-1\">\r\n                <div class=\"rectangle\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"overlap-group2\">\r\n            {/* scoreboard update */}\r\n            <div class=\"leaderboard-example\">\r\n              <div class=\"overlap-group3\">\r\n                <div class=\"name-1 karla-normal-black-24px\">{this.state.squares[0]}</div>\r\n                <img\r\n                  class=\"star-1\"\r\n                  src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/star-1@2x.svg\"\r\n                />\r\n                <div class=\"number-1 karla-bold-black-24px\">{this.state.scores[0]}</div>\r\n              </div>\r\n              <div class=\"flex-row\">\r\n                <div class=\"name-2 karla-normal-black-24px\">{this.state.squares[1]}</div>\r\n                <div class=\"number-2 karla-bold-black-24px\">{this.state.scores[1]}</div>\r\n              </div>\r\n              <div class=\"flex-row-1\">\r\n                <div class=\"egret karla-normal-black-24px\">{this.state.squares[2]}</div>\r\n                <div class=\"number karla-bold-black-24px\">{this.state.scores[2]}</div>\r\n              </div>\r\n              <div class=\"flex-row-2\">\r\n                <div class=\"name karla-normal-black-24px\">{this.state.squares[3]}</div>\r\n                <div class=\"number-3 karla-bold-black-24px\">{this.state.scores[3]}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        <button type=\"button\" value=\"Start Game\" onClick={() => this.timer()} >start timer  </button>\r\n        <div className=\"board\">\r\n          <Board\r\n              squares={this.state.squares}\r\n              size={this.props.size}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />   \r\n            <div id=\"countdown\"></div>      \r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n    \r\n \r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}