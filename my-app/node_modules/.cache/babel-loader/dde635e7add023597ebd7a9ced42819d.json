{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {// // set title for displaying people who were correct\n      // let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n      // // Show this if new round\n      // if(this.gameOver){\n      //   Swal.fire({  \n      //     position: 'top',\n      //     allowOutsideClick: false,\n      //     title: title,\n      //     text: 'Waiting for a new round...',\n      //     confirmButtonColor: 'rgb(208,33,41)',\n      //     width: 275\n      //   });\n      //   // this.turn = ;\n      // } \n      // // Show this to the room creator\n      // else if(this.props.isRoomCreator && this.gameOver){\n      //   Swal.fire({      \n      //     position: 'top',\n      //     allowOutsideClick: false,\n      //     title: title,\n      //     text: 'Ready for next round?',\n      //     showCancelButton: true,\n      //     confirmButtonColor: 'rgb(208,33,41)',\n      //     cancelButtonColor: '#aaa',\n      //     cancelButtonText: 'Nope',\n      //     confirmButtonText: 'Yea!',\n      //     width: 275,\n      //   }).then((result) => {\n      //     // Start a new round\n      //     if (result.value) {\n      //       this.props.pubnub.publish({\n      //         message: {\n      //           reset: true\n      //         },\n      //         channel: this.props.gameChannel\n      //       });\n      //     }\n      //     else{\n      //       // End the game\n      //       this.props.pubnub.publish({\n      //         message: {\n      //           endGame: true\n      //         },\n      //         channel: this.props.gameChannel\n      //       });\n      //     }\n      //   })      \n      // }\n    };\n\n    this.announceWinner = winner => {// TODO: Implement function\n      // End the game once there is a winner\n      // this.gameOver = true;\n      // this.newRound(winner);\t\n    };\n\n    this.checkForWinner = () => {// Possible winning endgames (max round, score?)\n      // this.counter++;\n      // // All rounds have been completed\n      // if(this.counter === 9){\n      //   this.gameOver = true;\n      //   this.newRound(null);\n      // }\n    };\n\n    this.publishMove = () => {\n      this.round += 1;\n      this.setState({\n        // update scores\n        scores: Array(this.props.size).fill(2)\n      });\n      this.checkForWinner();\n    };\n\n    this.onMakeMove = index => {\n      const squares = this.state.squares; // Check if the square is empty and if it's the player's turn to make a move\n\n      if (!squares[index]) {\n        squares[index] = 'X'; // this.setState({\n        //   squares: squares,\n        //   whosTurn: !this.state.whosTurn\n        // });\n        // // Other player's turn to make a move\n        // this.turn = (this.turn === 'X') ? 'O' : 'X';\n        // Publish move to the channel\n\n        this.props.pubnub.publish({\n          message: {\n            index: index,\n            piece: this.props.piece,\n            turn: this.turn\n          },\n          channel: this.props.gameChannel\n        }); // Check if there is a winner\n\n        this.checkForWinner();\n      }\n    };\n\n    this.state = {\n      squares: Array(this.props.size).fill(0),\n      // these are what people click on\n      // get list of scores for players in game\n      // imagine we can get this/store it in database?\n      round: 0\n    };\n    this.scores = Array(this.props.size).fill(0);\n    this.gameOver = false;\n  }\n\n  nextTurn(n) {// get next player from api calls\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      // Publish move to the opponent's board\n      this.publishMove(msg.message.index, msg.message.player); // Start a new round\n\n      if (msg.message.reset) {\n        this.setState({\n          // update scores\n          squares: Array(this.props.size).fill(3),\n          round: this.state.round + 1\n        });\n        this.gameOver = false;\n        this.round += 1;\n        Swal.close();\n      } // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n          Swal.close();\n          this.props.endGame();\n        }\n    });\n  }\n\n  render() {\n    let status; // Change to current round\n\n    status = `${this.round}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: index => this.onMakeMove(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-info\",\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"// TODO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","announceWinner","checkForWinner","publishMove","round","setState","scores","Array","size","fill","onMakeMove","index","squares","state","pubnub","publish","message","piece","turn","channel","gameChannel","gameOver","nextTurn","n","componentDidMount","getMessage","msg","player","reset","close","endGame","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      squares: Array(this.props.size).fill(0), // these are what people click on\r\n      // get list of scores for players in game\r\n      // imagine we can get this/store it in database?\r\n      round: 0\r\n\r\n    };\r\n\r\n    this.scores = Array(this.props.size).fill(0);\r\n    this.gameOver = false;\r\n  }\r\n\r\n  nextTurn(n) {\r\n    // get next player from api calls\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n      // Publish move to the opponent's board\r\n      \r\n        this.publishMove(msg.message.index, msg.message.player);\r\n      \r\n\r\n      // Start a new round\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          // update scores\r\n          squares: Array(this.props.size).fill(3),\r\n          round : this.state.round + 1\r\n        });\r\n\r\n        this.gameOver = false;\r\n        this.round += 1;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n  newRound = (winner) => {\r\n    // // set title for displaying people who were correct\r\n    // let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\r\n    // // Show this if new round\r\n    // if(this.gameOver){\r\n    //   Swal.fire({  \r\n    //     position: 'top',\r\n    //     allowOutsideClick: false,\r\n    //     title: title,\r\n    //     text: 'Waiting for a new round...',\r\n    //     confirmButtonColor: 'rgb(208,33,41)',\r\n    //     width: 275\r\n    //   });\r\n    //   // this.turn = ;\r\n    // } \r\n\r\n    // // Show this to the room creator\r\n    // else if(this.props.isRoomCreator && this.gameOver){\r\n    //   Swal.fire({      \r\n    //     position: 'top',\r\n    //     allowOutsideClick: false,\r\n    //     title: title,\r\n    //     text: 'Ready for next round?',\r\n    //     showCancelButton: true,\r\n    //     confirmButtonColor: 'rgb(208,33,41)',\r\n    //     cancelButtonColor: '#aaa',\r\n    //     cancelButtonText: 'Nope',\r\n    //     confirmButtonText: 'Yea!',\r\n    //     width: 275,\r\n    //   }).then((result) => {\r\n    //     // Start a new round\r\n    //     if (result.value) {\r\n    //       this.props.pubnub.publish({\r\n    //         message: {\r\n    //           reset: true\r\n    //         },\r\n    //         channel: this.props.gameChannel\r\n    //       });\r\n    //     }\r\n\r\n    //     else{\r\n    //       // End the game\r\n    //       this.props.pubnub.publish({\r\n    //         message: {\r\n    //           endGame: true\r\n    //         },\r\n    //         channel: this.props.gameChannel\r\n    //       });\r\n    //     }\r\n    //   })      \r\n    // }\r\n   }\r\n\r\n\t// Update score for the winner\r\n  announceWinner = (winner) => {\r\n    // TODO: Implement function\r\n\r\n\t\t// End the game once there is a winner\r\n\t\t// this.gameOver = true;\r\n\t\t// this.newRound(winner);\t\r\n  }\r\n  \r\n  checkForWinner = () => {\r\n    // Possible winning endgames (max round, score?)\r\n\r\n        // this.counter++;\r\n        // // All rounds have been completed\r\n        // if(this.counter === 9){\r\n        //   this.gameOver = true;\r\n        //   this.newRound(null);\r\n        // }\r\n  };\r\n   \r\n  // Opponent's move is published to the board\r\n  publishMove = () => {\r\n\r\n    this.round += 1;\r\n\r\n    this.setState({\r\n      // update scores\r\n      scores: Array(this.props.size).fill(2),\r\n    });\r\n\r\n    this.checkForWinner()\r\n  }\r\n\r\n  onMakeMove = (index) => {\r\n    const squares = this.state.squares;\r\n\r\n    // Check if the square is empty and if it's the player's turn to make a move\r\n    if(!squares[index]) { \r\n      squares[index] = 'X';\r\n\r\n      // this.setState({\r\n      //   squares: squares,\r\n      //   whosTurn: !this.state.whosTurn\r\n      // });\r\n  \r\n      // // Other player's turn to make a move\r\n      // this.turn = (this.turn === 'X') ? 'O' : 'X';\r\n\r\n      // Publish move to the channel\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          index: index,\r\n          piece: this.props.piece,\r\n          turn: this.turn\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n\r\n      // Check if there is a winner\r\n      this.checkForWinner()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"board\">\r\n          <Board\r\n              squares={this.state.squares}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />  \r\n            <p className=\"status-info\">{status}</p>        \r\n        </div>\r\n        \r\n        <div className=\"scores-container\">\r\n          <div>\r\n            // TODO\r\n          </div>\r\n        </div>   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}