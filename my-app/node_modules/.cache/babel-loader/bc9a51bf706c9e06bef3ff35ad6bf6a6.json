{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egg\\\\Desktop\\\\UPenn\\\\sem 4\\\\pcl\\\\mystery music\\\\my-app\\\\src\\\\Game.js\";\nimport React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {};\n\n    this.updateScore = winner => {// TODO: Implement function\n      // End the game once there is a winner\n      // this.gameOver = true;\n      // this.newRound(winner);\t\n    };\n\n    this.checkForWinner = () => {\n      // All rounds have been completed\n      if (this.round === 4) {\n        this.gameOver = true;\n\n        if (this.props.isRoomCreator) {\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Game Over',\n            text: 'Ready for next round?',\n            showCancelButton: true,\n            confirmButtonColor: 'rgb(208,33,41)',\n            cancelButtonColor: '#aaa',\n            cancelButtonText: 'Nope',\n            confirmButtonText: 'Yea!',\n            width: 275\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              this.props.pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: this.props.gameChannel\n              });\n            } else {\n              // End the game\n              this.props.pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: this.props.gameChannel\n              });\n            }\n          });\n        } else {\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Game Over',\n            text: 'Waiting for a new round...',\n            confirmButtonColor: 'rgb(208,33,41)',\n            width: 275\n          });\n        }\n      }\n    };\n\n    this.publishMove = (index, piece) => {\n      var squares = this.state.squares;\n      squares[index] = piece;\n      this.setState({\n        // update scores\n        squares: squares\n      });\n      this.counter += 1; // TODO: replace 2 and 8 with number of people in game\n\n      if (this.counter === 2) {\n        this.counter = 0;\n        squares = Array(8).fill(\"temp\");\n        this.round += 1;\n        this.answer = this.round;\n      }\n\n      if (index === this.answer) {\n        this.scores[index] += 1;\n      }\n\n      this.checkForWinner();\n    };\n\n    this.onMakeMove = index => {\n      var squares = this.state.squares; // Check if the square is empty and if we can make a move\n\n      if (squares[index]) {\n        squares[index] = 'X';\n        this.setState({\n          squares: squares\n        }); // Publish move to the channel\n\n        this.props.pubnub.publish({\n          message: {\n            index: index,\n            piece: 'X'\n          },\n          channel: this.props.gameChannel\n        }); // Check if there is a winner\n\n        this.checkForWinner();\n      }\n    };\n\n    this.state = {\n      // TODO: get number of players in game from database and replace 8\n      // also fill the squares with the player names in fillArray\n      squares: this.fillArray(8)\n    };\n    this.round = 0;\n    this.scores = Array(8).fill(0);\n    this.gameOver = false;\n    this.counter = 0;\n    this.answer = 0;\n  }\n\n  timer() {\n    var timeleft = 20;\n    var timer = setInterval(function () {\n      if (timeleft <= 0) {\n        clearInterval(timer);\n        document.getElementById(\"countdown\").innerHTML = \"Finished\";\n      } else {\n        document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\n      }\n\n      timeleft -= 1;\n    }, 1000);\n  }\n\n  fillArray(size) {\n    var array = Array(size).fill();\n\n    for (var index = 0; index < array.length; index++) {\n      array[index] = index;\n    }\n\n    return array;\n  }\n\n  nextTurn(n) {\n    // TODO: get next player from api calls\n    // currently a placeholder\n    return Math.floor(Math.random() * n);\n  }\n\n  componentDidMount() {\n    this.props.pubnub.getMessage(this.props.gameChannel, msg => {\n      timer(); // Publish move to the opponent's board    \n\n      this.publishMove(msg.message.index, msg.message.piece); // Start a new game\n\n      if (msg.message.reset) {\n        this.setState({\n          // update scores\n          squares: this.fillArray(8)\n        });\n        this.round = 0;\n        this.scores = Array(8).fill(0);\n        this.gameOver = false;\n        this.counter = 0;\n        this.answer = 0;\n        Swal.close();\n      } // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n          Swal.close();\n          this.props.endGame();\n        }\n    });\n  } // function for each new round\n\n\n  render() {\n    let status; // Change to current round\n\n    status = `${this.round}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [\"You are player \", this.props.player, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: [\"Guess who! \", this.answer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          size: this.props.size,\n          onClick: index => this.onMakeMove(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-info\",\n          children: [\"Round: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-info\",\n          children: [\"Counter: \", this.counter]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scores-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"countdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/egg/Desktop/UPenn/sem 4/pcl/mystery music/my-app/src/Game.js"],"names":["React","Board","Swal","Game","Component","constructor","props","newRound","winner","updateScore","checkForWinner","round","gameOver","isRoomCreator","fire","position","allowOutsideClick","title","text","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","width","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","publishMove","index","piece","squares","state","setState","counter","Array","fill","answer","scores","onMakeMove","fillArray","timer","timeleft","setInterval","clearInterval","document","getElementById","innerHTML","size","array","length","nextTurn","n","Math","floor","random","componentDidMount","getMessage","msg","close","render","status","player"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // TODO: get number of players in game from database and replace 8\r\n      // also fill the squares with the player names in fillArray\r\n      squares: this.fillArray(8), \r\n  \r\n    };\r\n    this.round = 0;\r\n    this.scores = Array(8).fill(0);\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.answer = 0;\r\n  }\r\n\r\n  timer() {\r\n    var timeleft = 20;\r\n    var timer = setInterval(function(){\r\n      if(timeleft <= 0){\r\n        clearInterval(timer);\r\n        document.getElementById(\"countdown\").innerHTML = \"Finished\";\r\n      } else {\r\n        document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\r\n      }\r\n      timeleft -= 1;\r\n    }, 1000);\r\n  }\r\n\r\n  fillArray(size) {\r\n    var array = Array(size).fill();\r\n    for (var index = 0; index < array.length; index++) {\r\n      array[index] = index;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  nextTurn(n) {\r\n    // TODO: get next player from api calls\r\n    // currently a placeholder\r\n    return Math.floor(Math.random() * n);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n\r\n      timer();\r\n      // Publish move to the opponent's board    \r\n      this.publishMove(msg.message.index, msg.message.piece);\r\n\r\n      // Start a new game\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          // update scores\r\n          squares: this.fillArray(8),\r\n        });\r\n\r\n        this.round = 0;\r\n        this.scores = Array(8).fill(0);\r\n        this.gameOver = false;\r\n        this.counter = 0;\r\n        this.answer = 0;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n  // function for each new round\r\n  newRound = (winner) => {\r\n\r\n  }\r\n\r\n\t// Update score for the winner\r\n  updateScore = (winner) => {\r\n    // TODO: Implement function\r\n\r\n\t\t// End the game once there is a winner\r\n\t\t// this.gameOver = true;\r\n\t\t// this.newRound(winner);\t\r\n  }\r\n  \r\n  checkForWinner = () => {\r\n\r\n    // All rounds have been completed\r\n    if (this.round === 4) {\r\n      this.gameOver = true;\r\n      if(this.props.isRoomCreator) {\r\n        Swal.fire({      \r\n              position: 'top',\r\n              allowOutsideClick: false,\r\n              title: 'Game Over',\r\n              text: 'Ready for next round?',\r\n              showCancelButton: true,\r\n              confirmButtonColor: 'rgb(208,33,41)',\r\n              cancelButtonColor: '#aaa',\r\n              cancelButtonText: 'Nope',\r\n              confirmButtonText: 'Yea!',\r\n              width: 275,\r\n            }).then((result) => {\r\n              // Start a new round\r\n              if (result.value) {\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    reset: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n      \r\n              else{\r\n                // End the game\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    endGame: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n            })      \r\n          \r\n      } else {\r\n      Swal.fire({  \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: 'Game Over',\r\n            text: 'Waiting for a new round...',\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            width: 275\r\n          });\r\n        }\r\n    }\r\n  };\r\n   \r\n  // Publishing an opponent's move onto the board\r\n  publishMove = (index, piece) => {\r\n    var squares = this.state.squares;\r\n\r\n    squares[index] = piece;\r\n\r\n    this.setState({\r\n      // update scores\r\n      squares: squares,\r\n    });\r\n\r\n    this.counter += 1;\r\n\r\n    // TODO: replace 2 and 8 with number of people in game\r\n    if (this.counter === 2) {\r\n      this.counter = 0;\r\n      squares = Array(8).fill(\"temp\");\r\n      this.round += 1;\r\n      this.answer = this.round;\r\n    }\r\n    if (index === this.answer) {\r\n      this.scores[index] += 1;\r\n    }\r\n\r\n    this.checkForWinner()\r\n  }\r\n\r\n  // Making a move on the board and publishing it\r\n  onMakeMove = (index) => {\r\n    var squares = this.state.squares;\r\n\r\n    // Check if the square is empty and if we can make a move\r\n    if(squares[index]) { \r\n      squares[index] = 'X';\r\n\r\n       this.setState({\r\n         squares: squares,\r\n       });\r\n\r\n      // Publish move to the channel\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          index: index,\r\n          piece: 'X',\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n\r\n      // Check if there is a winner\r\n      this.checkForWinner()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n         You are player {this.props.player}\r\n        <div className=\"prompt\">\r\n          Guess who! {this.answer}\r\n        </div>\r\n        <br></br>\r\n        <div className=\"board\">\r\n          <Board\r\n              squares={this.state.squares}\r\n              size={this.props.size}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />  \r\n            <p className=\"status-info\">Round: {status}</p>    \r\n            <p className=\"status-info\">Counter: {this.counter}</p>      \r\n        </div>\r\n        \r\n        <div className=\"scores-container\">\r\n          <div>\r\n          <div id=\"countdown\"></div>\r\n          </div>\r\n        </div>   \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}