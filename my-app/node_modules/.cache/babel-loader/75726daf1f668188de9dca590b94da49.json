{"ast":null,"code":"var _jsxFileName = \"/Users/lindalu/Documents/PCL Project/mystery-music/my-app/src/App.js\";\n// App.js\nimport React, { Component } from 'react';\nimport * as PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onPressCreate = e => {\n      this.size = 1; // Create a random name for the channel\n\n      this.roomId = shortid.generate().substring(0, 5);\n      this.lobbyChannel = 'spotifylobby--' + this.roomId;\n      this.pubnub.subscribe({\n        channels: [this.lobbyChannel],\n        withPresence: true\n      }); // Open the modal sweetalert2\n\n      Swal.mixin({\n        confirmButtonText: 'Next &rarr;',\n        showCancelButton: true,\n        progressSteps: ['1', '2']\n      }).queue([{\n        title: 'Share this room ID with your friend',\n        text: this.roomId\n      }, {\n        title: 'Type your spotify here',\n        input: 'text'\n      }]).then(result => {\n        if (result.value) {\n          // not sure if need to stringify with only one input, can't test ):\n          const answers = JSON.stringify(result.value);\n          Swal.fire({\n            html: `\n            Your spotify:\n            <pre><code>${answers}</code></pre>\n          `,\n            confirmButtonText: 'Play!'\n          });\n        }\n      });\n      this.setState({\n        player: '1',\n        isRoomCreator: true,\n        isDisabled: true,\n        // Disable the 'Create' button\n        myTurn: true // Room creator makes the 1st move\n\n      });\n    };\n\n    this.onPressJoin = e => {\n      Swal.mixin({\n        confirmButtonText: 'Next &rarr;',\n        showCancelButton: true,\n        progressSteps: ['1', '2']\n      }).queue([{\n        inputPlaceholder: 'Enter the room id',\n        input: 'text'\n      }, {\n        title: 'Type your spotify here',\n        input: 'text'\n      }]).then(result => {\n        if (result.value) {\n          const answers = JSON.stringify(result.value);\n          Swal.fire({\n            html: `\n            Your spotify:\n            <pre><code>${answers[0]}</code></pre>\n          `,\n            confirmButtonText: 'Play!'\n          }); // Check if the user typed a value in the input field\n\n          if (result.value[1]) {\n            this.joinRoom(result.value[1]);\n          }\n        }\n      });\n    };\n\n    this.joinRoom = value => {\n      this.roomId = value;\n      this.lobbyChannel = 'spotifylobby--' + this.roomId; // Check the number of people in the channel\n\n      this.pubnub.hereNow({\n        channels: [this.lobbyChannel]\n      }).then(response => {\n        if (response.totalOccupancy < 5) {\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          this.setState({\n            player: `${response.totalOccupancy + 1}`\n          });\n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true\n            },\n            channel: this.lobbyChannel\n          });\n        } else {\n          // Game in progress\n          Swal.fire({\n            title: 'Error',\n            text: 'Game is full.'\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.endGame = () => {\n      this.setState({\n        player: '',\n        isPlaying: false,\n        isRoomCreator: false,\n        isDisabled: false,\n        myTurn: false\n      });\n      this.lobbyChannel = null;\n      this.gameChannel = null;\n      this.roomId = null;\n      this.pubnub.unsubscribe({\n        channels: [this.lobbyChannel, this.gameChannel]\n      });\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\n    });\n    this.state = {\n      player: '',\n      // 1, 2, 3, 4, 5\n      isPlaying: false,\n      // Set to true when at least 2 players are in a channel\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false\n    };\n    this.lobbyChannel = null; // Lobby channel\n\n    this.gameChannel = null; // Game channel\n\n    this.size = null; // Number of players in room\n\n    this.roomId = null; // Unique id when player creates a room\n\n    this.pubnub.init(this); // Initialize PubNub\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, msg => {\n        // Start the game once an opponent joins the channel\n        if (msg.message.notRoomCreator) {\n          // Create a different channel for the game\n          this.gameChannel = 'spotifygame--' + this.roomId;\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n          this.setState({\n            isPlaying: true\n          }); // Close the modals if they are opened\n\n          Swal.close();\n        }\n      });\n    }\n  } // Create a room channel\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Spotify Game \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), !this.state.isPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"create-button \",\n              disabled: this.state.isDisabled,\n              onClick: e => this.onPressCreate(),\n              children: \" Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"join-button\",\n              onClick: e => this.onPressJoin(),\n              children: \" Join\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lindalu/Documents/PCL Project/mystery-music/my-app/src/App.js"],"names":["React","Component","PubNubReact","Swal","shortid","App","constructor","props","onPressCreate","e","size","roomId","generate","substring","lobbyChannel","pubnub","subscribe","channels","withPresence","mixin","confirmButtonText","showCancelButton","progressSteps","queue","title","text","input","then","result","value","answers","JSON","stringify","fire","html","setState","player","isRoomCreator","isDisabled","myTurn","onPressJoin","inputPlaceholder","joinRoom","hereNow","response","totalOccupancy","publish","message","notRoomCreator","channel","catch","error","console","log","endGame","isPlaying","gameChannel","unsubscribe","publishKey","subscribeKey","state","init","componentWillUnmount","componentDidUpdate","getMessage","msg","close","render"],"mappings":"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","sourcesContent":["// App.js\nimport React, { Component } from 'react';\nimport * as PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";\nimport shortid from 'shortid';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\n    });\n    this.state = {\n      player: '', // 1, 2, 3, 4, 5\n      isPlaying: false, // Set to true when at least 2 players are in a channel\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    };\n    this.lobbyChannel = null; // Lobby channel\n    this.gameChannel = null; // Game channel\n    this.size = null; // Number of players in room\n    this.roomId = null; // Unique id when player creates a room\n    this.pubnub.init(this); // Initialize PubNub\n  }\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if (this.lobbyChannel != null) {\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        // Start the game once an opponent joins the channel\n        if (msg.message.notRoomCreator) {\n          // Create a different channel for the game\n          this.gameChannel = 'spotifygame--' + this.roomId;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });\n\n          // Close the modals if they are opened\n          Swal.close();\n        }\n      });\n    }\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    this.size = 1;\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0, 5);\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n\n\n    // Open the modal sweetalert2\n    Swal.mixin({\n      confirmButtonText: 'Next &rarr;',\n      showCancelButton: true,\n      progressSteps: ['1', '2']\n    }).queue([\n      {\n        title: 'Share this room ID with your friend',\n        text: this.roomId\n      },\n      {\n        title: 'Type your spotify here',\n        input: 'text'\n      }\n    ]).then((result) => {\n      if (result.value) {\n        // not sure if need to stringify with only one input, can't test ):\n        const answers = JSON.stringify(result.value)\n        Swal.fire({\n          html: `\n            Your spotify:\n            <pre><code>${answers}</code></pre>\n          `,\n          confirmButtonText: 'Play!'\n        })\n      }\n    })\n\n    this.setState({\n      player: '1',\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });\n  }\n\n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n\n    Swal.mixin({\n      confirmButtonText: 'Next &rarr;',\n      showCancelButton: true,\n      progressSteps: ['1', '2']\n    }).queue([\n      {\n        inputPlaceholder: 'Enter the room id',\n        input: 'text'\n      },\n      {\n        title: 'Type your spotify here',\n        input: 'text'\n      }\n    ]).then((result) => {\n      if (result.value) {\n        const answers = JSON.stringify(result.value)\n        Swal.fire({\n          html: `\n            Your spotify:\n            <pre><code>${answers[0]}</code></pre>\n          `,\n          confirmButtonText: 'Play!'\n        })\n        // Check if the user typed a value in the input field\n        if (result.value[1]) {\n          this.joinRoom(result.value[1]);\n        }\n      }\n    })\n\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub.hereNow({\n      channels: [this.lobbyChannel],\n    }).then((response) => {\n      if (response.totalOccupancy < 5) {\n        this.pubnub.subscribe({\n          channels: [this.lobbyChannel],\n          withPresence: true\n        });\n\n        this.setState({\n          player: `${response.totalOccupancy + 1}`,\n        });\n\n        this.pubnub.publish({\n          message: {\n            notRoomCreator: true,\n          },\n          channel: this.lobbyChannel\n        });\n      }\n      else {\n        // Game in progress\n        Swal.fire({\n          title: 'Error',\n          text: 'Game is full.',\n        })\n      }\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      player: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;\n\n    this.pubnub.unsubscribe({\n      channels: [this.lobbyChannel, this.gameChannel]\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"title\">\n          <p> Spotify Game </p>\n        </div>\n        {\n          !this.state.isPlaying &&\n          <div className=\"game\">\n            <div className=\"board\">\n              <div className=\"button-container\">\n                <button\n                  className=\"create-button \"\n                  disabled={this.state.isDisabled}\n                  onClick={(e) => this.onPressCreate()}\n                > Create\n                </button>\n                <button\n                  className=\"join-button\"\n                  onClick={(e) => this.onPressJoin()}\n                > Join\n                </button>\n              </div>\n            </div>\n          </div>\n        }\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}