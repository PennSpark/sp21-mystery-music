[{"C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\index.js":"1","C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\App.js":"3","C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\Board.js":"4","C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\Game.js":"5","C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\Square.js":"6"},{"size":517,"mtime":1619552445600,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1616725458837,"results":"9","hashOfConfig":"8"},{"size":11282,"mtime":1620485997415,"results":"10","hashOfConfig":"8"},{"size":778,"mtime":1620280298439,"results":"11","hashOfConfig":"8"},{"size":12034,"mtime":1620485062799,"results":"12","hashOfConfig":"8"},{"size":175,"mtime":1618342097842,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gtga36",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\index.js",[],["28","29"],"C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\App.js",["30","31","32","33"],"C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\Board.js",[],"C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\Game.js",["34","35"],"import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\nimport './Game.css';\r\nimport axios from 'axios';\r\n\r\nconst option_letters = ['A', 'B', 'C', 'D'];\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.player = this.props.player;\r\n    this.roomId = this.props.roomId;\r\n    this.databaseGameId = this.props.databaseGameId;\r\n    this.score = 0; // idk if this is necessary, remove?\r\n    this.gameOver = false;\r\n    // this.answer = 0;\r\n\r\n    this.nextTurn();\r\n\r\n    this.state = {\r\n      // squares contains the player names in the game for the game board thing !\r\n      // these items must be in state in order to update the screen (render())\r\n      // when state is also updated\r\n      squares: option_letters, \r\n      size : 0,\r\n      round : 1,\r\n      scores: [],\r\n      guess: \"\",\r\n      answer: 0,\r\n      currentSong: \"\",\r\n      time: 10\r\n    };\r\n\r\n    console.log(\"size: \" + this.state.size);\r\n    console.log(\"player: \" + this.player);\r\n  }\r\n\r\n  // function for each new round\r\n  newRound = () => {\r\n    var scores = this.state.scores;\r\n\r\n    // get updated scores from db \r\n    axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId)\r\n    .then(response => {\r\n\r\n      console.log(response);\r\n      for (var i = 0; i < response.data.size; i++){\r\n        scores[i] = response.data.players[i].score;\r\n      }\r\n\r\n      this.setState({\r\n        scores: scores\r\n      })\r\n     \r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    });\r\n\r\n\r\n    // use nextTurn to set new answer from db when running\r\n    this.nextTurn();\r\n    // this.state.answer = Math.floor(this.state.size * Math.random());\r\n    // this.state.currentSong = \"random song test\";\r\n    console.log(\"new answer: \" + this.state.answer);\r\n\r\n    // update state\r\n    this.setState({\r\n      scores: scores,\r\n      round: this.state.round + 1\r\n    });\r\n\r\n    console.log(\"round\" + this.state.round);\r\n\r\n    // starts new timer for next round\r\n    this.timer();\r\n  }\r\n\r\n  // function used to determine the end of each round\r\n  timer = () => {\r\n    clearInterval(this.timer2);\r\n    var timeleft = 10;\r\n    var timer = setInterval(() => {\r\n      if (timeleft <= 0) {\r\n        clearInterval(timer);\r\n\r\n        this.setState({\r\n          time: timeleft\r\n        });\r\n\r\n        console.log(\"timer finish!\");\r\n        // end game if 10 rounds have been played\r\n        if (this.state.round < 10) {\r\n\r\n        this.newRound();\r\n      } else {\r\n        // displays winner of game, top points scorer\r\n        this.checkForWinner();\r\n      }\r\n      } else {\r\n        this.setState({\r\n          time: timeleft\r\n        });\r\n        \r\n      }\r\n      timeleft -= 1;\r\n    }, 1000);\r\n  }\r\n  \r\n  // retrieve next player song pair info, to be used in newRound()\r\n  nextTurn() {\r\n    axios.get('http://localhost:5001/games/getRandomPair/' + this.databaseGameId)\r\n    .then(response => {\r\n      console.log(response);\r\n      //player id of song\r\n      //console.log(\"id \" + response.data[0].playerId);\r\n      //player name of song if needed\r\n      console.log(\"name \" + response.data[this.state.round * 2].playerName);\r\n      //name of song if needed\r\n      console.log(\"song \" + response.data[this.state.round * 2].songName);\r\n\r\n      var answer = 0;\r\n      for (var i = 0; i < this.state.size; i++) {\r\n        if (response.data[this.state.round * 2].playerName.localeCompare(this.state.squares[i]) === 0) {\r\n          answer = i;\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        answer: answer,\r\n        currentSong: response.data[this.state.round * 2].songName\r\n      });\r\n\r\n      console.log(\"got pair\");\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    });\r\n  }\r\n\r\n  // function runs whenever a new element is added to the DOM\r\n  // maybe switch to componentDidUpdate if more appropriate?\r\n  componentDidMount() {\r\n\r\n    var squares = Array(this.state.size).fill(\"loading names\");\r\n    var scores = Array(this.state.size).fill(\"loading scores\");\r\n\r\n    this.timer2 = setInterval(() => {\r\n      if (this.state.size === 4) {\r\n        this.timer();\r\n      }\r\n\r\n      axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId)\r\n      .then(response => {\r\n        console.log(\"hi there\");\r\n        console.log(response);\r\n\r\n        for (var i = 0; i < response.data.size; i++){\r\n          console.log(response.data.players[i].playerName);\r\n          squares[i] = response.data.players[i].playerName;\r\n          scores[i] = 0;\r\n        }\r\n        \r\n          this.setState({\r\n            size : response.data.size,\r\n            squares: squares,\r\n            scores: scores\r\n          });\r\n      \r\n      })\r\n      .catch((error) => {\r\n          console.log(error);\r\n      });\r\n    }, 1000);\r\n\r\n    // gets size(num of players in game) and updates squares\r\n    axios.get('http://localhost:5001/games/getGame/' + this.databaseGameId)\r\n    .then(response => {\r\n      console.log(\"hi there\");\r\n      console.log(response);\r\n\r\n      for (var i = 0; i < response.data.size; i++){\r\n        console.log(response.data.players[i].playerName);\r\n        squares[i] = response.data.players[i].playerName;\r\n        scores[i] = 0;\r\n      }\r\n      \r\n        this.setState({\r\n          size : response.data.size,\r\n          squares: squares,\r\n          scores: scores\r\n        });\r\n     \r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    });\r\n\r\n    // what is used to get info from other players so we can appropriately\r\n    // update the scoreboard based on whether or not other people got answers right\r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n \r\n      this.publishMove(msg.message.index);\r\n\r\n      // Start a new game\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          round: 0,\r\n          scores: [0, 0, 0, 0]\r\n        });\r\n\r\n        this.score = 0;\r\n        this.gameOver = false;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n\t// Update db score \r\n  updateScore = (player) => {\r\n\r\n    const updateScoreThing = {\r\n      joinCode: this.roomId,\r\n      playerName: player,\r\n      score: this.score\r\n    };\r\n\r\n    axios.post('http://localhost:5001/games/updateScore', updateScoreThing)\r\n      .then(res => console.log(res.data));\r\n\r\n  }\r\n\r\n  // bad function name, actually just displays pop up for when game is \r\n  checkForWinner = () => {\r\n    var winner = 0;\r\n\r\n    for(var i = 0; i < this.state.size; i++) {\r\n      if (this.state.scores[i] > this.state.scores[winner]) {\r\n        winner = this.state.squares[i];\r\n      }\r\n    }\r\n\r\n    if (winner === 0) {\r\n      winner = this.state.squares[0];\r\n    }\r\n\r\n    // All rounds have been completed\r\n      this.gameOver = true;\r\n      if(this.props.isRoomCreator) {\r\n        Swal.fire({      \r\n              position: 'top',\r\n              allowOutsideClick: false,\r\n              title: winner + ' won!',\r\n              text: 'Want to play again?',\r\n              showCancelButton: true,\r\n              confirmButtonColor: 'rgb(208,33,41)',\r\n              cancelButtonColor: '#aaa',\r\n              cancelButtonText: 'Nope',\r\n              confirmButtonText: 'Yea!',\r\n              width: 275,\r\n            }).then((result) => {\r\n              // Start a new round\r\n              if (result.value) {\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    reset: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n      \r\n              else{\r\n                // End the game\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    endGame: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n                axios.delete('http://localhost:5001/games/updateScore'+ this.databaseGameId)\r\n                .then(res => console.log(res));\r\n              }\r\n            })      \r\n          \r\n      } else {\r\n      Swal.fire({  \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: winner + ' won!',\r\n            text: 'Waiting for a new round...',\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            width: 275\r\n          });\r\n        }\r\n  };\r\n   \r\n  // Publishing an opponent's score onto scoreboard\r\n  // setState should rerender screen automatically\r\n  publishMove = (index) => {\r\n    var scores = this.state.scores;\r\n    scores[index] = scores[index] + 1;\r\n\r\n    this.setState({\r\n      // update scores\r\n      scores: scores\r\n    });\r\n\r\n  }\r\n\r\n  // function runs when a button on the gameboard is clicked\r\n  onMakeMove = (index) => {\r\n\r\n    console.log(index);\r\n\r\n    this.setState({\r\n      guess: index\r\n    });\r\n\r\n    if (index === this.state.answer) {\r\n\r\n      console.log(\"correct!\");\r\n      console.log(\"guess: \" + index);\r\n      this.score += 1;\r\n      console.log(\"this.score: \" + this.score);\r\n\r\n      this.updateScore(this.player);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"game\">\r\n      <div class=\"container-center-horizontal\">\r\n      <div class=\"game-screen-1 screen\">\r\n        <div class=\"flex-row-5\">\r\n          <img\r\n            class=\"mystery-music-logo3-1\"\r\n            src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/mysterymusic-logo3-1@2x.png\"\r\n          />\r\n          <div class=\"overlap-group\">\r\n            <h1 class=\"text-1\">Guess Whose Playlist?</h1>\r\n          </div>\r\n        </div>\r\n        <div class=\"flex-row-4\">\r\n          <div class=\"overlap-group1\">\r\n            <img\r\n              class=\"vector-197\"\r\n              src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector-197@2x.svg\"\r\n            />\r\n          </div>\r\n          <div class=\"flex-col\">\r\n            <div class=\"album-cover\">\r\n              <h1>\r\n            Round: {this.state.round} <br/>\r\n            Song: {this.state.currentSong}\r\n            </h1>\r\n            </div>\r\n            <br/>\r\n            <div class=\"countdown\">Time left: {this.state.time}</div>  \r\n            <div class=\"play-bar\">\r\n              <div class=\"overlap-group3-1\">\r\n                <div class=\"rectangle\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"overlap-group2\">\r\n            {/* scoreboard update */}\r\n            <div class=\"leaderboard-example\">\r\n              <div class=\"overlap-group3\">\r\n                <div class=\"name-1 karla-normal-black-24px\">{this.state.squares[0]}</div>\r\n                <div class=\"number-1 karla-bold-black-24px\">{this.state.scores[0]}</div>\r\n              </div>\r\n              <div class=\"flex-row\">\r\n                <div class=\"name-2 karla-normal-black-24px\">{this.state.squares[1]}</div>\r\n                <div class=\"number-2 karla-bold-black-24px\">{this.state.scores[1]}</div>\r\n              </div>\r\n              <div class=\"flex-row-1\">\r\n                <div class=\"egret karla-normal-black-24px\">{this.state.squares[2]}</div>\r\n                <div class=\"number karla-bold-black-24px\">{this.state.scores[2]}</div>\r\n              </div>\r\n              <div class=\"flex-row-2\">\r\n                <div class=\"name karla-normal-black-24px\">{this.state.squares[3]}</div>\r\n                <div class=\"number-3 karla-bold-black-24px\">{this.state.scores[3]}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        {/* <button type=\"button\" value=\"Start Game\" onClick={() => this.timer()} >start timer  </button> */}\r\n\r\n          <Board\r\n              squares={this.state.squares}\r\n              size={this.props.size}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />   \r\n \r\n      </div>\r\n    </div>\r\n    </div>\r\n    \r\n \r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","C:\\Users\\egg\\Desktop\\UPenn\\sem 4\\pcl\\mystery music\\my-app\\src\\Square.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":151,"column":45,"nodeType":"42","messageId":"43","endLine":151,"endColumn":47},{"ruleId":"40","severity":1,"message":"41","line":249,"column":47,"nodeType":"42","messageId":"43","endLine":249,"endColumn":49},{"ruleId":"44","severity":1,"message":"45","line":335,"column":12,"nodeType":"46","endLine":338,"endColumn":14},{"ruleId":"44","severity":1,"message":"45","line":339,"column":12,"nodeType":"46","endLine":342,"endColumn":14},{"ruleId":"44","severity":1,"message":"45","line":348,"column":11,"nodeType":"46","endLine":351,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":358,"column":13,"nodeType":"46","endLine":361,"endColumn":15},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]