[{"C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\index.js":"1","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\App.js":"3","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\Game.js":"4","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\Board.js":"5","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\Square.js":"6"},{"size":517,"mtime":1619554890998,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1619493842828,"results":"9","hashOfConfig":"8"},{"size":8481,"mtime":1619502814215,"results":"10","hashOfConfig":"8"},{"size":8682,"mtime":1619554966754,"results":"11","hashOfConfig":"8"},{"size":837,"mtime":1619493842825,"results":"12","hashOfConfig":"8"},{"size":175,"mtime":1619493842826,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wmmnww",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\index.js",[],["29","30"],"C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\App.js",["31","32","33"],"// App.js\r\nimport React, { Component } from 'react';\r\nimport Game from './Game';\r\nimport game from './Board';\r\nimport * as PubNubReact from 'pubnub-react';\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from 'shortid';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\r\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\r\n    });\r\n    this.state = {\r\n      player: '', // 1, 2, 3, 4, 5\r\n      isPlaying: false, // Set to true when at least 2 players are in a channel\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    };\r\n    this.lobbyChannel = null; // Lobby channel\r\n    this.gameChannel = null; // Game channel\r\n    this.size = null; // Number of players in room\r\n    this.roomId = null; // Unique id when player creates a room\r\n    this.pubnub.init(this); // Initialize PubNub\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if (this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n        // Start the game once an opponent joins the channel\r\n        if (msg.message.notRoomCreator) {\r\n          // Create a different channel for the game\r\n          this.gameChannel = 'spotifygame--' + this.roomId;\r\n\r\n          this.pubnub.subscribe({\r\n            channels: [this.gameChannel]\r\n          });\r\n\r\n          this.setState({\r\n            isPlaying: true\r\n          });\r\n\r\n          // Close the modals if they are opened\r\n          Swal.close();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    this.size = 1;\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0, 5);\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    //endpoint for creating a new game in databsae\r\n    const newGame = {\r\n      joinCode: this.roomId,\r\n    };\r\n    axios.post('http://localhost:5001/games/add', newGame)\r\n      .then(res => console.log(res.data));\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true\r\n    });\r\n\r\n    // Open the modal sweetalert2\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2']\r\n    }).queue([\r\n      {\r\n        title: 'Share this room ID with your friend',\r\n        text: this.roomId\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n\r\n        this.setState({\r\n          player: result.value[1],\r\n          isRoomCreator: true,\r\n          isDisabled: true, // Disable the 'Create' button\r\n          myTurn: true, // Room creator makes the 1st move\r\n        });\r\n\r\n        const newPlayer = {\r\n          joinCode: this.roomId,\r\n          playerName: result.value[1]\r\n        };\r\n        axios.post('http://localhost:5001/games/addPlayer', newPlayer)\r\n          .then(res => console.log(res.data));\r\n      }\r\n    })\r\n  }\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2']\r\n    }).queue([\r\n      {\r\n        inputPlaceholder: 'Enter the room id',\r\n        input: 'text'\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n        // Check if the user typed a value in the input field\r\n        if (result.value[1]) {\r\n          this.joinRoom(result.value[0]);\r\n\r\n          this.setState({\r\n            player: result.value[1],\r\n          });\r\n\r\n          //endpoint for adding a new player to a game in databsae\r\n          const newPlayer = {\r\n            joinCode: result.value[0],\r\n            playerName: result.value[1]\r\n          };\r\n\r\n          axios.post('http://localhost:5001/games/addPlayer', newPlayer)\r\n            .then(res => console.log(res.data));\r\n\r\n            \r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub.hereNow({\r\n      channels: [this.lobbyChannel],\r\n    }).then((response) => {\r\n      if (response.totalOccupancy < 8) {\r\n        this.size += 1;\r\n\r\n        this.pubnub.subscribe({\r\n          channels: [this.lobbyChannel],\r\n          withPresence: true\r\n        });\r\n\r\n        this.pubnub.publish({\r\n          message: {\r\n            notRoomCreator: true,\r\n          },\r\n          channel: this.lobbyChannel\r\n        });\r\n      }\r\n      else {\r\n        // Game in progress\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'Game is full.',\r\n        })\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // Reset everything\r\n  endGame = () => {\r\n    this.setState({\r\n      player: '',\r\n      isPlaying: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    });\r\n\r\n    this.lobbyChannel = null;\r\n    this.gameChannel = null;\r\n    this.roomId = null;\r\n\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n   <div>\r\n     {\r\n       !this.state.isPlaying &&\r\n   \r\n       <div class=\"home-v2-1 screen\">\r\n         <div class=\"overlap-group\">\r\n           <img\r\n             class=\"card-pricing-2\"\r\n             src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-2@1x.svg\"\r\n           />\r\n           <img\r\n             class=\"card-pricing-3\"\r\n             src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-3@1x.svg\"\r\n           />\r\n           <div class=\"text-1\">\r\n             How to Play<br />Up to 8 players may join a game, be sure to share the join code with your friends!<br />During\r\n             each round, the game will play a song from one of the playerâ€™s Spotify playlist.<br />Players then have to\r\n             select the user whose playlist they think the song is from.<br />Correct answers get 1 point, and wrong answers\r\n             get 0 points.<br />After 20 rounds, the player with the most number of points wins!\r\n           </div>\r\n           <div class=\"flex-row\">\r\n              <button\r\n                class=\"create-button\"\r\n                disabled={this.state.isDisabled}\r\n                onClick={(e) => this.onPressCreate()}\r\n                > Create\r\n              </button>\r\n              <button\r\n                class=\"join-button\"\r\n                onClick={(e) => this.onPressJoin()}\r\n                > Join\r\n              </button>\r\n           </div>\r\n         </div>\r\n       </div>\r\n  \r\n    }\r\n\r\n    {\r\n      this.state.isPlaying &&\r\n      <div className=\"game\">\r\n        <h3>Your room code: {this.roomId}</h3>\r\n        {\r\n          /*\r\n        axios.get('http://localhost:5001/games/getGame', {joinCode: this.roomId})\r\n        .then(response => {\r\n          this.setState({\r\n            size : response.data.size\r\n          });\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n        */\r\n        }\r\n        <h3>Number of people in game: {this.size}</h3>\r\n      <Game\r\n        pubnub={this.pubnub}\r\n        gameChannel={this.gameChannel}\r\n        player={this.player}\r\n        size={this.size}\r\n        isRoomCreator={this.state.isRoomCreator}\r\n        endGame={this.endGame}\r\n      />\r\n      </div>\r\n    }\r\n   </div>\r\n\r\n                                \r\n    );\r\n  }\r\n}\r\nexport default App;","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\Game.js",["34","35","36","37","38","39"],"import React from 'react';\r\nimport Board from './Board';\r\nimport Swal from \"sweetalert2\";  \r\nimport './Game.css';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      // TODO: get number of players in game from database and replace 8\r\n      // also fill the squares with the player names in fillArray\r\n      squares: this.fillArray(8), \r\n  \r\n    };\r\n    this.round = 0;\r\n    this.scores = Array(8).fill(0);\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.answer = 0;\r\n    \r\n  }\r\n\r\n  // function for each new round\r\n  newRound = () =>{\r\n    var squares = this.state.squares;\r\n\r\n    squares = Array(8).fill(\"temp\");\r\n    this.round += 1;\r\n    this.answer = this.round;\r\n\r\n    this.setState({\r\n      // update scores\r\n      squares: squares,\r\n    });\r\n  }\r\n\r\n  timer = () => {\r\n    var timeleft = 10;\r\n    var timer = setInterval(function(){\r\n      if(timeleft <= 0){\r\n        clearInterval(timer);\r\n        //document.getElementById(\"countdown\").innerHTML = \"Finished\";\r\n        this.round += 1;\r\n        var x = this.round;\r\n        //document.getElementById(\"status\").innerHTML = 'Round:' + x;\r\n        this.newRound();\r\n      } else {\r\n        //document.getElementById(\"countdown\").innerHTML = timeleft + \" seconds remaining\";\r\n      }\r\n      timeleft -= 1;\r\n    }, 1000);\r\n  }\r\n\r\n  fillArray(size) {\r\n    var array = Array(size).fill();\r\n    for (var index = 0; index < array.length; index++) {\r\n      array[index] = index;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  nextTurn(n) {\r\n    // TODO: get next player from api calls\r\n    // currently a placeholder\r\n    return Math.floor(Math.random() * n);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer();\r\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\r\n\r\n      // Publish move to the opponent's board    \r\n      this.publishMove(msg.message.index, msg.message.piece);\r\n\r\n      // Start a new game\r\n      if(msg.message.reset){\r\n        this.setState({\r\n          // update scores\r\n          squares: this.fillArray(8),\r\n        });\r\n\r\n        this.round = 0;\r\n        this.scores = Array(8).fill(0);\r\n        this.gameOver = false;\r\n        this.counter = 0;\r\n        this.answer = 0;\r\n        Swal.close()\r\n      }\r\n\r\n      // End the game and go back to the lobby\r\n      else if(msg.message.endGame){\r\n        Swal.close();\r\n        this.props.endGame();\r\n      }\r\n    });\r\n  }\r\n\r\n\t// Update score for the winner\r\n  updateScore = (winner) => {\r\n    // TODO: Implement function\r\n\r\n\t\t// End the game once there is a winner\r\n\t\t// this.gameOver = true;\r\n\t\t// this.newRound(winner);\t\r\n  }\r\n  \r\n  checkForWinner = () => {\r\n\r\n    // All rounds have been completed\r\n    if (this.round === 4) {\r\n      this.gameOver = true;\r\n      if(this.props.isRoomCreator) {\r\n        Swal.fire({      \r\n              position: 'top',\r\n              allowOutsideClick: false,\r\n              title: 'Game Over',\r\n              text: 'Ready for next round?',\r\n              showCancelButton: true,\r\n              confirmButtonColor: 'rgb(208,33,41)',\r\n              cancelButtonColor: '#aaa',\r\n              cancelButtonText: 'Nope',\r\n              confirmButtonText: 'Yea!',\r\n              width: 275,\r\n            }).then((result) => {\r\n              // Start a new round\r\n              if (result.value) {\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    reset: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n      \r\n              else{\r\n                // End the game\r\n                this.props.pubnub.publish({\r\n                  message: {\r\n                    endGame: true\r\n                  },\r\n                  channel: this.props.gameChannel\r\n                });\r\n              }\r\n            })      \r\n          \r\n      } else {\r\n      Swal.fire({  \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: 'Game Over',\r\n            text: 'Waiting for a new round...',\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            width: 275\r\n          });\r\n        }\r\n    }\r\n  };\r\n   \r\n  // Publishing an opponent's move onto the board\r\n  publishMove = (index, piece) => {\r\n    var squares = this.state.squares;\r\n\r\n    squares[index] = piece;\r\n\r\n    this.setState({\r\n      // update scores\r\n      squares: squares,\r\n    });\r\n    \r\n    if (index === this.answer) {\r\n      this.scores[index] += 1;\r\n    }\r\n\r\n    this.checkForWinner()\r\n  }\r\n\r\n  // Making a move on the board and publishing it\r\n  onMakeMove = (index) => {\r\n    var squares = this.state.squares;\r\n\r\n    // Update chosen button to show that it's been clicked\r\n    if(squares[index]) { \r\n      squares[index] = 'X';\r\n\r\n       this.setState({\r\n         squares: squares,\r\n       });\r\n\r\n      // Publish move to the channel\r\n      this.props.pubnub.publish({\r\n        message: {\r\n          index: index,\r\n          piece: 'X',\r\n        },\r\n        channel: this.props.gameChannel\r\n      });  \r\n\r\n      // Check if there is a winner\r\n      this.checkForWinner();\r\n    }\r\n  }\r\n// Instructions\r\n//   How to Play\r\n// Up to 8 players may join a game, be sure to share the join code with your friends!\r\n// During each round, the game will play a song from one of the playerâ€™s Spotify playlist.\r\n// Players then have to select the user whose playlist they think the song is from.\r\n// Correct answers get 1 point, and wrong answers get 0 points.\r\n// After 20 rounds, the player with the most number of points wins!\r\n\r\n  render() {\r\n    let status;\r\n    // Change to current round\r\n    status = `${this.round}`;\r\n    return (\r\n      /*\r\n      <div className=\"game\">\r\n         You are player {this.props.player}\r\n        <div className=\"prompt\">\r\n          Guess who! {this.answer}\r\n        </div>\r\n        <br></br>\r\n        \r\n        <div className=\"board\">\r\n          <Board\r\n              squares={this.state.squares}\r\n              size={this.props.size}\r\n              onClick={index => this.onMakeMove(index)}\r\n            />  \r\n            <p id=\"status\">Round: {this.round}</p>    \r\n            <div id=\"countdown\"></div>      \r\n        </div>\r\n        \r\n        <div className=\"scores-container\">\r\n          <div>\r\n            SCORES {this.scores}\r\n          </div>\r\n        </div>   \r\n      </div>\r\n      */\r\n      <div class=\"container-center-horizontal\">\r\n      <div class=\"game-screen-1 screen\">\r\n        <div class=\"flex-row-5\">\r\n          <img\r\n            class=\"mystery-music-logo3-1\"\r\n            src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/mysterymusic-logo3-1@2x.png\"\r\n          />\r\n          <div class=\"overlap-group\">\r\n            <h1 class=\"text-1\">Guess Whose Playlist?</h1>\r\n          </div>\r\n        </div>\r\n        <div class=\"flex-row-4\">\r\n          <div class=\"overlap-group1\">\r\n            <img\r\n              class=\"vector-197\"\r\n              src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/vector-197@2x.svg\"\r\n            />\r\n          </div>\r\n          <div class=\"flex-col\">\r\n            <div class=\"album-cover\"></div>\r\n            <div class=\"play-bar\">\r\n              <div class=\"overlap-group3-1\">\r\n                <div class=\"rectangle\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"overlap-group2\">\r\n            <div class=\"leaderboard-example\">\r\n              <div class=\"overlap-group3\">\r\n                <div class=\"name-1 karla-normal-black-24px\">Linda</div>\r\n                <img\r\n                  class=\"star-1\"\r\n                  src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/6078ee0985f5e7f39b088386/img/star-1@2x.svg\"\r\n                />\r\n                <div class=\"number-1 karla-bold-black-24px\">6</div>\r\n              </div>\r\n              <div class=\"flex-row\">\r\n                <div class=\"name-2 karla-normal-black-24px\">Lindsay</div>\r\n                <div class=\"number-2 karla-bold-black-24px\">5</div>\r\n              </div>\r\n              <div class=\"flex-row-1\">\r\n                <div class=\"egret karla-normal-black-24px\">Egret</div>\r\n                <div class=\"number karla-bold-black-24px\">3</div>\r\n              </div>\r\n              <div class=\"flex-row-2\">\r\n                <div class=\"name karla-normal-black-24px\">David</div>\r\n                <div class=\"number-3 karla-bold-black-24px\">1</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n \r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\Board.js",[],"C:\\Users\\david\\mystery-music2\\sp21-mystery-music\\my-app\\src\\Square.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":12},{"ruleId":"48","severity":1,"message":"49","line":237,"column":12,"nodeType":"50","endLine":240,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":241,"column":12,"nodeType":"50","endLine":244,"endColumn":14},{"ruleId":"44","severity":1,"message":"51","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":13},{"ruleId":"44","severity":1,"message":"52","line":45,"column":13,"nodeType":"46","messageId":"47","endLine":45,"endColumn":14},{"ruleId":"44","severity":1,"message":"53","line":214,"column":5,"nodeType":"46","messageId":"47","endLine":214,"endColumn":11},{"ruleId":"48","severity":1,"message":"49","line":244,"column":11,"nodeType":"50","endLine":247,"endColumn":13},{"ruleId":"48","severity":1,"message":"49","line":254,"column":13,"nodeType":"50","endLine":257,"endColumn":15},{"ruleId":"48","severity":1,"message":"49","line":271,"column":17,"nodeType":"50","endLine":274,"endColumn":19},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'game' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Board' is defined but never used.","'x' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]