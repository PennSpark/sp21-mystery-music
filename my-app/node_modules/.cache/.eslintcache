[{"C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\index.js":"1","C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\App.js":"2","C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\Board.js":"4","C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\Game.js":"5","C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\Square.js":"6"},{"size":517,"mtime":1619749689209,"results":"7","hashOfConfig":"8"},{"size":9142,"mtime":1619754561396,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1619749689209,"results":"10","hashOfConfig":"8"},{"size":837,"mtime":1619749689206,"results":"11","hashOfConfig":"8"},{"size":9843,"mtime":1619755808024,"results":"12","hashOfConfig":"8"},{"size":175,"mtime":1619749689208,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1cphpzs",{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\index.js",[],["28","29"],"C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\App.js",["30","31","32","33","34"],"// App.js\r\nimport React, { Component } from 'react';\r\nimport Game from './Game';\r\nimport game from './Board';\r\nimport * as PubNubReact from 'pubnub-react';\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from 'shortid';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-353f0377-1a09-4a4f-be96-1f51d601592c\",\r\n      subscribeKey: \"sub-c-7cb8e092-8c1a-11eb-9de7-3a1dcc291cdf\"\r\n    });\r\n    // TODO: Clean up code and get rid of unnecessary bits\r\n    this.state = {\r\n      player: '', // username players enter for themselves\r\n      isPlaying: false, // Set to true when at least 2 players are in a channel\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    };\r\n    this.lobbyChannel = null; // Lobby channel\r\n    this.gameChannel = null; // Game channel\r\n    this.size = null; // Number of players in room USE DATABASE FOR THIS\r\n    this.roomId = null; // Unique id when player creates a room\r\n    this.databaseGameId = null // id for game in database for endpoints\r\n    this.pubnub.init(this); // Initialize PubNub\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if (this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n        // Start the game once an opponent joins the channel\r\n        if (msg.message.notRoomCreator) {\r\n          // Create a different channel for the game\r\n          this.gameChannel = 'spotifygame--' + this.roomId;\r\n\r\n          this.pubnub.subscribe({\r\n            channels: [this.gameChannel]\r\n          });\r\n\r\n          this.setState({\r\n            isPlaying: true\r\n          });\r\n\r\n          // Close the modals if they are opened\r\n          Swal.close();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    this.size = 1;\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0, 5);\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    //endpoint for creating a new game in databsae\r\n    const newGame = {\r\n      joinCode: this.roomId,\r\n    };\r\n    axios.post('http://localhost:5001/games/add', newGame)\r\n      .then(res => console.log(res.data));\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true\r\n    });\r\n\r\n    // Open the modal sweetalert2\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2']\r\n    }).queue([\r\n      {\r\n        title: 'Share this room ID with your friend',\r\n        text: this.roomId\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n\r\n        this.setState({\r\n          player: result.value[1],\r\n          isRoomCreator: true,\r\n          isDisabled: true, // Disable the 'Create' button\r\n          myTurn: true, // Room creator makes the 1st move\r\n        });\r\n\r\n        //endpoint for adding a new player to a game in database\r\n        const newPlayer = {\r\n          joinCode: this.roomId,\r\n          playerName: result.value[1]\r\n        };\r\n        axios.post('http://localhost:5001/games/addPlayer', newPlayer)\r\n          .then(res => console.log(res.data));\r\n          axios.get('http://localhost:5001/games/')\r\n          .then(response => {\r\n            for (var i = 0; i < response.data.length; i++){\r\n              if (response.data[i].joinCode == this.roomId){\r\n                this.databaseGameId = response.data[i]._id;\r\n              }\r\n            }\r\n          })\r\n          .catch((error) => {\r\n              console.log(error);\r\n          })\r\n      }\r\n    })\r\n  }\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n\r\n    Swal.mixin({\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2']\r\n    }).queue([\r\n      {\r\n        inputPlaceholder: 'Enter the room id',\r\n        input: 'text'\r\n      },\r\n      {\r\n        title: 'Type your username here',\r\n        input: 'text'\r\n      }\r\n    ]).then((result) => {\r\n      if (result.value) {\r\n        // const answers = JSON.stringify(result.value)\r\n        Swal.fire({\r\n          html: `\r\n            Your username:\r\n            <pre><code>${result.value[1]}</code></pre>\r\n          `,\r\n          confirmButtonText: 'Play!'\r\n        });\r\n        // Check if the user typed a value in the input field\r\n        if (result.value[1]) {\r\n          this.joinRoom(result.value[0]);\r\n\r\n          this.setState({\r\n            player: result.value[1],\r\n          });\r\n\r\n          //endpoint for adding a new player to a game in databsae\r\n          const newPlayer = {\r\n            joinCode: result.value[0],\r\n            playerName: result.value[1]\r\n          };\r\n\r\n          axios.post('http://localhost:5001/games/addPlayer', newPlayer)\r\n            .then(res => console.log(res.data));\r\n\r\n            axios.get('http://localhost:5001/games/')\r\n            .then(response => {\r\n              for (var i = 0; i < response.data.length; i++){\r\n                if (response.data[i].joinCode == this.roomId){\r\n                  this.databaseGameId = response.data[i]._id;\r\n                }\r\n              }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n        \r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = 'spotifylobby--' + this.roomId;\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub.hereNow({\r\n      channels: [this.lobbyChannel],\r\n    }).then((response) => {\r\n      if (response.totalOccupancy < 8) {\r\n        this.size += 1;\r\n\r\n        this.pubnub.subscribe({\r\n          channels: [this.lobbyChannel],\r\n          withPresence: true\r\n        });\r\n\r\n        this.pubnub.publish({\r\n          message: {\r\n            notRoomCreator: true,\r\n          },\r\n          channel: this.lobbyChannel\r\n        });\r\n      }\r\n      else {\r\n        // Game in progress\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'Game is full.',\r\n        })\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // Reset everything\r\n  endGame = () => {\r\n    this.setState({\r\n      player: '',\r\n      isPlaying: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false,\r\n      myTurn: false,\r\n    });\r\n\r\n    this.lobbyChannel = null;\r\n    this.gameChannel = null;\r\n    this.roomId = null;\r\n\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel, this.gameChannel]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n   <div>\r\n     {\r\n       !this.state.isPlaying &&\r\n   \r\n       <div class=\"home-v2-1 screen\">\r\n         <div class=\"overlap-group\">\r\n           <img\r\n             class=\"card-pricing-2\"\r\n             src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-2@1x.svg\"\r\n           />\r\n           <img\r\n             class=\"card-pricing-3\"\r\n             src=\"https://anima-uploads.s3.amazonaws.com/projects/60760a93d4d62b3f8b0aea2b/releases/608797e5c0ff3678276ff026/img/card-pricing-3@1x.svg\"\r\n           />\r\n           <div class=\"text-1\">\r\n             How to Play<br />Up to 8 players may join a game, be sure to share the join code with your friends!<br />During\r\n             each round, the game will play a song from one of the player’s Spotify playlist.<br />Players then have to\r\n             select the user whose playlist they think the song is from.<br />Correct answers get 1 point, and wrong answers\r\n             get 0 points.<br />After 20 rounds, the player with the most number of points wins!\r\n           </div>\r\n           <div class=\"flex-row\">\r\n              <button\r\n                class=\"create-button\"\r\n                disabled={this.state.isDisabled}\r\n                onClick={(e) => this.onPressCreate()}\r\n                > Create\r\n              </button>\r\n              <button\r\n                class=\"join-button\"\r\n                onClick={(e) => this.onPressJoin()}\r\n                > Join\r\n              </button>\r\n           </div>\r\n         </div>\r\n       </div>\r\n  \r\n    }\r\n\r\n    {\r\n      this.state.isPlaying &&\r\n      <Game\r\n        pubnub={this.pubnub}\r\n        gameChannel={this.gameChannel}\r\n        player={this.state.player}\r\n        size={this.size}\r\n        isRoomCreator={this.state.isRoomCreator}\r\n        endGame={this.endGame}\r\n        roomId ={this.roomId}\r\n        databaseGameId = {this.databaseGameId}\r\n      />\r\n    }\r\n   </div>\r\n\r\n                                \r\n    );\r\n  }\r\n}\r\nexport default App;","C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\Board.js",[],"C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\Game.js",["35","36","37","38","39","40","41"],"C:\\Users\\david\\mystery-music3\\sp21-mystery-music\\my-app\\src\\Square.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":4,"column":8,"nodeType":"48","messageId":"49","endLine":4,"endColumn":12},{"ruleId":"50","severity":1,"message":"51","line":126,"column":45,"nodeType":"52","messageId":"53","endLine":126,"endColumn":47},{"ruleId":"50","severity":1,"message":"51","line":184,"column":47,"nodeType":"52","messageId":"53","endLine":184,"endColumn":49},{"ruleId":"54","severity":1,"message":"55","line":262,"column":12,"nodeType":"56","endLine":265,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":266,"column":12,"nodeType":"56","endLine":269,"endColumn":14},{"ruleId":"46","severity":1,"message":"57","line":7,"column":7,"nodeType":"48","messageId":"49","endLine":7,"endColumn":21},{"ruleId":"46","severity":1,"message":"58","line":60,"column":13,"nodeType":"48","messageId":"49","endLine":60,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":249,"column":15,"nodeType":"52","messageId":"53","endLine":249,"endColumn":17},{"ruleId":"46","severity":1,"message":"59","line":275,"column":5,"nodeType":"48","messageId":"49","endLine":275,"endColumn":11},{"ruleId":"54","severity":1,"message":"55","line":295,"column":11,"nodeType":"56","endLine":298,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":305,"column":13,"nodeType":"56","endLine":308,"endColumn":15},{"ruleId":"54","severity":1,"message":"55","line":322,"column":17,"nodeType":"56","endLine":325,"endColumn":19},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'game' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'option_letters' is assigned a value but never used.","'x' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]